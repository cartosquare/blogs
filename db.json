{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"e73ab702f50aaf7e0697f109ef49c862d15b33bb","modified":1472131058000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1472130117000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1472130117000},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1472130117000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1472130117000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1472130117000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1472130117000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1472130117000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1472130117000},{"_id":"themes/next/_config.yml","hash":"49f092c71117167d9318153bdf623c638354cea0","modified":1472135354000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1472130117000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1472130117000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1472130117000},{"_id":"source/_posts/2016-04-22-sorting-algorithms.md","hash":"cabd5754f5ac0037d291f0bd48e94e3fdbe38442","modified":1472135472000},{"_id":"source/_posts/2016-05-07-minutely-osm-database.md","hash":"df5d39b130d70e6165da9b5c702a919358b9c8f4","modified":1472135459000},{"_id":"source/categories/index.md","hash":"982034d88d179a00f47e3df3633dc9b8bdff3fd8","modified":1472132471000},{"_id":"source/tags/index.md","hash":"9f396765893d18dbe15b47384e96fecce1d58253","modified":1472132362000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1472130117000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1472130117000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1472130091000},{"_id":"themes/next/.git/index","hash":"2dacf6faa5366f0885bc3fe0f1bbcd0ffcc92e85","modified":1472130117000},{"_id":"themes/next/.git/packed-refs","hash":"5299dd07c22750af4a0d99f89ea2c8e2d52787e3","modified":1472130117000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1472130117000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1472130117000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1472130117000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1472130117000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1472130117000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1472130117000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1472130117000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1472130117000},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1472130117000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1472130117000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1472130117000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1472130117000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1472130117000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1472130117000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1472130117000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1472130117000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1472130117000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1472130117000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1472130117000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1472130117000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1472130117000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1472130117000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1472130117000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1472130117000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1472130117000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1472130117000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472130117000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1472130091000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1472130091000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1472130091000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1472130091000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1472130091000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1472130091000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1472130091000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1472130091000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1472130091000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1472130091000},{"_id":"themes/next/.git/logs/HEAD","hash":"f50ca981c4c1a4b10b366dc629bbce1194c0384e","modified":1472130117000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1472130117000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1472130117000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1472130117000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1472130117000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1472130117000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1472130117000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1472130117000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1472130117000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f3895bf44a9fb7c462f2e57b9a914703c2f152ba","modified":1472130117000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1472130117000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1472130117000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1472130117000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1472130117000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1472130117000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1472130117000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1472130117000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1472130117000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1472130117000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1472130117000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1472130117000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1472130117000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1472130117000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1472130117000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1472130117000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1472130117000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1472130117000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1472130117000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1472130117000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472130117000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472130117000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1472130117000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1472130117000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1472130117000},{"_id":"source/images/avatar.jpg","hash":"a65b9fe28be78e8156b410974067ec5d3ad4de5a","modified":1472131064000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472130117000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472130117000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472130117000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472130117000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472130117000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472130117000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472130117000},{"_id":"themes/next/.git/refs/heads/master","hash":"a000ff7ceba1704584e39c908e83fe3db5859335","modified":1472130117000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1472130117000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1472130117000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1472130117000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1472130117000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1472130117000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1472130117000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1472130117000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1472130117000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1472130117000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1472130117000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1472130117000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1472130117000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1472130117000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1472130117000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1472130117000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1472130117000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1472130117000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1472130117000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1472130117000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1472130117000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1472130117000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1472130117000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1472130117000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1472130117000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1472130117000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1472130117000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1472130117000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1472130117000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1472130117000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1472130117000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1472130117000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1472130117000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1472130117000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1472130117000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1472130117000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1472130117000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1472130117000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1472130117000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1472130117000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1472130117000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1472130117000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1472130117000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1472130117000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1472130117000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1472130117000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1472130117000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1472130117000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1472130117000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1472130117000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1472130117000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1472130117000},{"_id":"themes/next/.git/objects/pack/pack-302df316ecce271b6f4e6a41e488dce8621d02b1.idx","hash":"c532d45cf4b95ca70060967ae49a69d834ac1726","modified":1472130117000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"f50ca981c4c1a4b10b366dc629bbce1194c0384e","modified":1472130117000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1472130117000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1472130117000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1472130117000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"1e3e1c6231408e18e8485a8e0e59e8880349b210","modified":1472130117000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1472130117000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1472130117000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1472130117000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1472130117000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1472130117000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1472130117000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1472130117000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1472130117000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1472130117000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1472130117000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1472130117000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1472130117000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1472130117000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1472130117000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1472130117000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1472130117000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1472130117000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1472130117000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1472130117000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1472130117000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1472130117000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1472130117000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1472130117000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1472130117000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"f50ca981c4c1a4b10b366dc629bbce1194c0384e","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1472130117000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1472130117000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1472130117000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1472130117000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1472130117000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1472130117000},{"_id":"themes/next/.git/objects/pack/pack-302df316ecce271b6f4e6a41e488dce8621d02b1.pack","hash":"f150f345b13aab12109f73c22c2d43d4d5159361","modified":1472130117000},{"_id":"source/images/alipay.jpg","hash":"97443169553474dafc51fda3b3da1fa89b55fc1e","modified":1472134427000},{"_id":"source/images/weichat.jpg","hash":"198d0f865c18a990e44eab15f86785f3b8bef3c6","modified":1472134150000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1472134327000},{"_id":"source/images/wechatpay.jpg","hash":"233f3a8c74b7316fc1f855a17cc0ece33020d237","modified":1472134308000},{"_id":"source/404.html","hash":"4fcf152f2db3f483a536889f555e6d1e26a6c831","modified":1472135015000}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2016-08-25T13:40:05.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-08-25 21:40:05\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-08-25T13:41:11.000Z","path":"categories/index.html","_id":"cisadnf8s0001hdjcimryj5g8","layout":"page","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-08-25T13:35:08.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-08-25 21:35:08\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-08-25T13:39:22.000Z","path":"tags/index.html","layout":"page","_id":"cisadnf8w0003hdjc2b96uvj4","content":"","excerpt":"","more":""},{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"www.xuxiang.site\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"www.xuxiang.site\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","date":"2016-08-25T14:23:35.000Z","updated":"2016-08-25T14:23:35.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cisaf7fa700004mjcf20j9npf","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"www.xuxiang.site\" homepagename=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"www.xuxiang.site\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n"}],"Post":[{"layout":"post","title":"排序算法","date":"2016-04-21T16:00:00.000Z","_content":"\n排序算法是计算机领域最经典也是研究最广泛的算法，并且是许多算法的基础。\n\n<!-- more -->\n\n## 排序算法的应用领域\n\n* **搜索**： 排过序的数据可以使用二分查找（折半查找）快速地搜索某个元素。\n* **最邻近对**： 给定n个数的集合，如何找到相差最小的一对数？如果集合已经排过序，那么一次线性查找就可以完成任务。\n* **元素唯一性** -- 给定n个数的集合，里面有重复的元素吗？这是最邻近对问题的一个特例。\n* **频率分布**： 给定n个数的集合，哪个数出现的次数最多？（求众数）。如果集合是有序的，相同的元素势必会连在一起，一次线性循环即可搞定。如果要查找任意一个元素k出现了多少次，首先用二分查找找到k，然后再往左移动，直到出现不是k的元素位置，同理也往右移动，这样便可得到k出现的次数。\n* **选择**： 一个数列里第k大的元素是哪个？如果元素已经是有序的，那么第k个元素就是我们要找的。\n* **凸包**： 给定二维平面上的n个点，求最小的能包含所有点的多边形？如果点根据x坐标进行排序，就可以按顺序把点插入（详细算法以后会专门介绍）。\n* **找到两个集合的交集**： 如果对两个集合分别排序，两个集合是否相交以及交集是多少就很容易求了。\n\n## 排序的语义\n\n排序有几个重要的语义，分述如下：\n\n* 递增还是递减顺序？\n* 使用某个键值排序还是用整个记录去排序？\n\n上述两个歧义可以通过让客户端自己指定比较函数来解决。\n\n* 遇到相同的元素怎么办？有时候即使多个记录的某个键值相同，但是这些记录间的相互顺序有可能是重要的，因为之前它们可能根据其它键值排过序。如果一个排序算法能够保持相同元素的相对顺序不变，那么称这个算法是稳定的。可惜的是比较快的算法几乎都不是稳定的。另外需要注意如果相同的元素特别多，一些系统默认的比较快的排序算法有可能会很慢！\n* 遇到非数值型的数据怎么办？比如在排序一个整形数列时遇到string类型，排序一个string类型时遇到Beijing 和PeKing 或者是 北京师范大学和北师大？它们的相互顺序应该怎么确定？\n\n## 几种排序方法的比较\n\n\n排序方法 | 原地排序 | 稳定排序 | 最差 | 平均 | 最好 | 备注\n--- | --- | --- | --- | --- | --- | ---\n选择排序 | 是 | 否 | N^2/2 | N^2/2 | N^2/2 | 只需要N次交换\n插入排序 | 是 | 是 | N^2/2 | N^2/4 | N | 通常在N很小或是数据以及部分排序的时候使用\nshell排序 | 是 | 否 | 未知 | 未知 | N | 实现代码很少，通常用于嵌入式编程，时间复杂度未知但低于二次 |\n快速排序 | 是 | 否 | N^2/2 | 2N\\lg(N) | lg(N) | 概率上保证 2N\\lg(N) 的时间复杂度，实际使用中最快的算法\n3路快速排序 | 是 | 否 | N^2/2 | 2N\\lg(N) | N | 提升快速排序在大量重复记录情况下的效率\n归并排序 | 否 | 是 | N\\lg(N) | N\\lg(N) | N\\lg(N) | 严格保证了lg(N)的时间复杂度，并且是稳定的\n堆排序 | 是 | 否 | 2N\\lg(N) | 2N\\lg(N) | N\\lg(N) | 严格保证了lg(N) 的时间复杂度，并且原地排序的（节省空间）\n？？？ | 是 | 是 | N\\lg(N) | N\\lg(N) | N\\lg(N) | 终极排序算法:)\n\n\n## 选择排序\n\n基本思想\n\n1. 输入：包含N条记录的数列A\n2. 从0 循环至 N-1\n3. 在第i次循环中，找到剩下记录中最小纪录的索引值 min\n4. 交换 A[i] 和 A[min]\n\n实现代码\n\n```c++\ntemplate<typename T>\nvoid selection_sort(std::vector<T>& a, int lo, int hi) {\n    for (int i = lo; i <= hi; ++i) {\n        int min_index = i;\n\n        for (int j = i + 1; j <= hi; ++j) {\n            if (a[min_index] > a[j]) {\n                min_index = j;\n            }\n        }\n\n        // swap a[i] and a[min_index]\n        exch(a[i], a[min_index]);\n    }\n}\n```\n\n选择排序的基本特点\n\n* 运行时间和输入没有关系，即使输入已经是有序的，也需要二次的时间复杂度\n* 选择排序的记录移动是所有算法中最小的，只有线性时间的交换\n\n## 插入排序\n\n基本思想\n\n1. 输入：包含N条记录的数列A\n2. 从0 循环至 N-1\n3. 在第i次循环中，把A[i]和位于它左边并且比它大的记录交换\n\n实现代码\n\n```\n    template<typename T>\n    void insertion_sort(std::vector<T>& a, int lo, int hi) {\n        for (int i = lo; i <= hi; ++i) {\n            for (int j = i; j > lo; --j) {\n                if (a[j] < a[j - 1]) {\n                    exch(a[j], a[j - 1]);\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n```\n\n基本特点\n\n* 如果输入记录是部分排序的话，插入排序的运行时间是线性的\n\n\n## shell 排序\n\nshell 排序是插入排序的增强版：插入排序在往左比较大小时每次只后退一步，而shell排序每次会后退多步。假设后退h步，那么得到的序列就是一个以h为间隔排序好的序列。shell排序会进行多次h排序。h的取值则从大慢慢减为1，这样做的理由是：\n\n* 当h很大时，以h为间隔的序列较小，排序可以很快完成\n* 当h变为1时，由于之前已经进行了多次h间隔排序，序列已经部分排序，因此插入排序此时的运行时间是线性的，也可以很快完成。\n\n在实际中，通常h的取值序列有多种，不同的序列会导致不一样的时间复杂度。比较容易计算的是使用 3x + 1 这个公式来产生序列\n\n实现代码\n\n```\n    template<typename T>\n    void shell_sort(std::vector<T>& a, int lo, int hi) {\n        int N = hi - lo + 1;\n\n        // decide decrease sequence\n        int h = 1;\n        while (h < N / 3) {\n            h = 3 * h + 1;\n        }\n\n        while (h >= 1) {\n            // h-sort the array\n            for (int i = h + lo; i <= hi; ++i) {\n                for (int j = i; j >= h + lo && a[j] < a[j - h]; j -= h) {\n                    exch(a[j], a[j - h]);\n                }\n            }\n            h = h / 3;\n        }\n    }\n```\n\n## 堆排序\n\n堆排序体现了好的数据结构对算法的帮助。堆排序和选择排序的原理一致，都是从剩下的记录中不断选择最小的记录出来。但是选择排序需要线性的时间去查找最小记录。而从一个集合中选择最小的记录出来是一个经典的优先队列解决的问题，如果使用堆或者平衡二叉树来实现优先队列的话，就能让这个操作变成log(N)时间。从而，借助更好的优先队列实现，堆排序把选择排序从O(n^2)复杂度提升到了O(n\\log(n))\n\n## 堆\n\n堆是实现优先队列插入和获取最小值操作的简单而高效的数据结构。他通过维持记录部分排序而非完全排序来工作，因此会比较高效。一个堆实际上可以用一个二叉树来表示（注意不是二叉搜索树！）。在一个最小堆中，一个节点的键值总是比它的子节点要小；在一个最大堆中，一个节点的键值总是比它的子节点要大。\n\n堆使用数组来实现，不需要使用任何的指针！键值在堆中的位置充当了指针的作用。在这个数组中，我们把二叉树的根节点存储在数组的第一个位置（为了方便，数组索引从1开始），相应地把它的左右两个子节点放在第二和第三的位置。一般地，我们可以把完全二叉数第l层的2^l个键值从左到右放在2^{l-1}和2^l - 1之间。并且节点之间有以下关系：\n\n* 位于位置k的结点的父结点的位置是 k / 2\n* 位于位置k的结点的子节点的位置是 2k 和 2k + 1\n\n## 如何构造一个堆\n可以通过往数组末端不断插入记录来递增地构造一个堆。在插入新记录时，堆的顺序可能会不满足预定的条件：在最小堆中新记录可能小于它的父节点，或者是在最大堆中新纪录大于它的父节点。在这种情况下，需要交换这个记录和它的父节点的位置，这称作一次上游,对这个记录不断上浮直到不能继续上游为止，就维持了堆的既有顺序。下面的代码显示了最小堆的上游代码：\n\n```\n        void swim(int k) {\n            // parent of node at k is k/2\n            while (k > 1 && pq_[k / 2] > pq_[k]) {\n                // if children's node is larger than parent, exchange\n                exch(pq_[k], pq_[k / 2]);\n\n                // swim up a level\n                k /= 2;\n            }\n        }\n```\n\n对于一个有n个记录的堆来说，一次上浮最多只需要lg(n)次操作，因此，构造堆的时间复杂度为O(n\\log(n))复杂度\n\n## 如何从堆中取得最小值\n从最小堆中取得最小的记录只需取数组的第一个元素即可，但是取完后二叉树会出现一个洞，需要把数组最后的一个记录填补到已经移除的第一个记录上；把最后一个记录移上来后可能会破坏堆的性质，如最小堆中根结点的记录可能会大于子结点，如果出现这种情况，需要将根结点和其较大的子结点交换，这称为一次下沉。下面是最小堆的下沉代码：\n\n```\n        void sink(int k) {\n            // make sure k is not the bottom level\n            while (2 * k <= N_) {\n                // j is the left children\n                int j = 2 * k;\n                if (j < N_ && pq_[j] < pq_[j + 1]) {\n                    // now, j is the bigger children\n                    j++;\n                }\n\n                if (pq_[k] > pq_[j]) {\n                    break;\n                }\n\n                // if parent node is smaller than the bigger children, exchange\n                exch(pq_[k], pq_[j]);\n\n                // sink down a level\n                k = j;\n            }\n\n        }\n```\n\n对于一个有n个记录的堆来说，一次下沉最多只需要lg(n)次操作，因此，取得最小值的操作的时间复杂度为O(\\log(n))\n\n## 更快的构建堆的方法\n\n一条一条地插入记录来构造堆的方法需要O(n\\log(n))的时间复杂度，如果记录序列全部已知，我们可以采用一种自底向上的构造方法，基本思路是从底端不是叶子结点的记录开始，做下沉操作，这样只需处理n/2个结点，这个时间复杂度基本上是线性的。下面是最大堆的下沉操作和构造方式：\n\n```\n  template<typename T>\n    void sink(std::vector<T>& a, int k, int N) {\n        // NOTE: the value of node k is a[k - 1]\n\n        // make sure k is not the bottom level\n        while (2 * k < N) {\n            // j is the left children\n            int j = 2 * k;\n            if (j < N && a[j - 1] < a[j]) {\n                // now, j is the bigger children\n                j++;\n            }\n\n            if (a[k - 1] > a[j - 1]) {\n                break;\n            }\n\n            // if parent node is smaller than the bigger children, exchange\n            exch(a[k - 1], a[j - 1]);\n\n            // sink down a level\n            k = j;\n        }\n    }\n    // Heap construction\n    for (int k = N / 2; k >= 1; --k) {\n        // loop for every non leaf node\n        sink(pq, k, N);\n    }\n```\n\n堆排序实现(这里用到了上面的最大堆的下沉方法)\n\n```\n    template<typename T>\n    void heap_sort(std::vector<T>& pq) {\n        int N = pq.size();\n\n        // Heap construction\n        for (int k = N / 2; k >= 1; --k) {\n            // loop for every non leaf node\n            sink(pq, k, N);\n        }\n\n        // Sort down\n        while(N > 1) {\n            exch(pq[0], pq[N - 1]);\n            sink(pq, 1, --N);\n        }\n    }\n```\n\n基本特点\n\n* 最坏的情况下也能达到O(n\\log(n))，这是排序算法的理论最优。\n* 缺点在于内部循环较长，无法使用缓存，并且是不稳定的，在实际中并不是最快的\n\n## 归并排序\n\n归并排序体现了分治的策略。主要思想是把大问题分解成小问题，不断递归去求解。\n\n代码实现\n\n```\n    // merge tow subarray\n    template<typename T>\n    void merge(std::vector<T>& a, std::vector<T>& aux, int lo, int mid, int hi) {\n        for (int i = lo; i <= hi; ++i) {\n            aux[i] = a[i];\n        }\n\n        int m = lo;\n        int n = mid + 1;\n        for (int i = lo; i <= hi; ++i) {\n            if (m > mid) {\n                a[i] = aux[n++];\n            } else if (n > hi) {\n                a[i] = aux[m++];\n            } else if (aux[n] < aux[m]) {\n                a[i] = aux[n++];\n            } else {\n                a[i] = aux[m++];\n            }\n        }\n    }\n\n    // resuive sort\n    const int CUTOFF = 7;\n    template<typename T>\n    void merge_sort(std::vector<T>& a, std::vector<T>& aux, int lo, int hi) {\n        if (hi <= lo) {\n            return;\n        }\n\n        // use insertion sort for small subarrays\n        if (hi <= lo + CUTOFF - 1) {\n            insertion_sort(a, lo, hi);\n            return;\n        }\n\n        int mid = lo + (hi - lo) / 2;\n        merge_sort(a, aux, lo, mid);\n        merge_sort(a, aux, mid + 1, hi);\n\n        // do not merge if already sorted\n        if (a[mid] < a[mid + 1]) {\n            return;\n        }\n\n        merge(a, aux, lo, mid, hi);\n    }\n```\n\n上述实现中借助了一个额外的aux数组来存储记录，并且在子问题规模很小时采用了插入排序。\n\n基本特点\n\n* 归并排序的平均时间复杂度为O(n\\log(n))\n* 归并排序不是原地排序，需要额外的存储空间\n\n\n## 归并排序的非递归实现\n\n基本思想\n\n1. 遍历数组，首先归并排序大小为1的子数组\n2. 继续遍历，不断归并大小为2，4，16的子数组\n\n```\n    template<typename T>\n    void bottom_up_merge_sort(std::vector<T>& a, std::vector<T>& aux, int lo, int hi) {\n        int N = hi - lo + 1;\n        for (int sz = 1; sz < N; sz += sz) {\n            for (int k = lo; k < lo + N - sz; k += (sz + sz)) {\n                merge(a, aux, k, k + sz - 1, std::min(k + sz + sz - 1, N - 1));\n            }\n        }\n    }\n```\n\n基本特点\n\n* 如果有足够的空间的话，非递归的归并排序的稳定性是工业级别的\n\n## 快速排序\n\n快速排序和归并排序类似，都是递归的算法，通过把问题分解为子问题来解决。不同的是，归并排序每次都把问题分成相同大小的两个子问题，然后通过归并操作进行合并；而快速排序则通过拆分的方式来分解问题，即每次找一个中间元素，把记录分成小于该中间元素（在中间元素左边）和大于该中间元素（在中间元素右边）的这两部分，此时中间元素已经排好序，只需对左右两边递归继续采用相同方式拆分即可。\n\n和归并排序的归并操作是线性的时间复杂度类似，快速排序的拆分操作也是线性的。归并排序和快速排序的递归分解都把问题变成了一个二叉树的结构，而归并排序的二叉树是完全二叉树，因此树高是lg(n)，而快速排序的树高则与中间元素的选取有很大的关系，为了达到了归并排序相似的树高，要求输入记录必须是无序的，研究表明，无序的二叉树插入的树高平均只比完全二叉树高36%，因此该种情况下的快速排序和归并排序的时间复杂度是相同的。当然由于快速排序加入了随机的因素，我们只能说平均情况下快速排序和归并排序的时间复杂度是相同的，也不排除很小的概率的情况下快速排序的时间复杂度为n^2\n\n基本思想\n\n* 随机打乱原始记录\n* 针对索引为j的记录进行拆分，使得：\n  * 记录a[j]位于最终已排序的位置\n  * j左边的记录没有比a[j]大的\n  * j右边的记录没有比a[j]小的\n* 对拆分后的各个部分递归进行上述处理\n\n代码实现\n\n```\n    template<typename T>\n    int partition(std::vector<T>& a, int lo, int hi) {\n        int i = lo;\n        int j = hi + 1;\n\n        while(true) {\n            // process i pointer\n            // find item on left to swap\n            while(a[++i] < a[lo]) {\n                if (i == hi) {\n                    break;\n                }\n            }\n\n            // process j pointer\n            // find item on right to swap\n            while(a[--j] > a[lo]) {\n                if (j == lo) {\n                    break;\n                }\n            }\n\n            // find if pointers cross\n            if (i >= j) {\n                break;\n            }\n\n            // swap\n            exch(a[i], a[j]);\n        }\n\n        // swap with partition item\n        exch(a[lo], a[j]);\n\n        // return index of item now known to be in place\n        return j;\n    }\n\n\n    template<typename T>\n    void quick_sort_sub(std::vector<T>& a, int lo, int hi) {\n        if (hi <= lo + CUTOFF) {\n            // improvement 1:  use insertion fort for small subarray\n            insertion_sort(a, lo, hi);\n            return;\n        }\n\n        // improvement 2: estimate partition item with median of three samples\n        int m = median_of_three(a, lo, lo + (hi - lo)/ 2, hi);\n        exch(a[lo], a[m]);\n\n        int j = partition(a, lo, hi);\n        quick_sort_sub(a, lo, j - 1);\n        quick_sort_sub(a, j + 1, hi);\n    }\n\n    template<typename T>\n    void quick_sort(std::vector<T>& a) {\n        // shuffle is needed for performance guarantee\n        shuffle(a);\n\n        quick_sort_sub<T>(a, 0, static_cast<int>(a.size()) - 1);\n    }\n```\n\n上面的代码使用了两个提升：和归并排序中一样，我们在记录序列很小时采用了插入排序；另外我们本来是采用随机打乱后的记录顺序来选取中间值，为了让得到的二叉树更加平衡，我们需要选择接近数列中位数的记录作为中间值，这里我们采用了抽样的方式来计算中值。\n\n基本特点\n\n虽然快速排序理论上只能在概率上趋近于nlg(n)的时间复杂度，但是由于它的内层循环较小，并且容易利用计算机缓存等原因，一个设计得很好的快速排序的效率是归并排序和堆排序的2-3倍！\n\n在实际应用中，如果记录有许多重复的话，会发现快速排序接近于n^2的时间复杂度，这时候我们需要使用快速排序的改进版：3路快速排序\n\n## 3路快速排序\n\n基本思想是：\n\n* 把记录序列查分成3部分（而不是之前的两部分）\n* 在lt和gt中间的记录都等于中间元素\n* lt左边的记录都不大于中间元素\n* lt右边的记录都不小于中间元素\n\n实现代码\n\n```\n    // * Let v be partitioning item a[lo].\n    // * Scan i from left to right.\n    //  - (a[i] < v): exchange a[lt] with a[i]; increment both lt and i\n    //  - (a[i] > v): exchange a[gt] with a[i]; decrement gt;\n    //  - (a[i] == v): increment i\n    template<typename T>\n    void quick_sort_3way_sub(std::vector<T>& a, int lo, int hi) {\n        if (hi <= lo + CUTOFF) {\n            // improvement 1:  use insertion fort for small subarray\n            insertion_sort(a, lo, hi);\n            return;\n        }\n\n        int lt = lo;\n        int i = lo;\n        int gt = hi;\n\n        // improvement 2: estimate partition item with median of three samples\n        int m = median_of_three(a, lo, lo + (hi - lo)/ 2, hi);\n        exch(a[lo], a[m]);\n\n        // partition item\n        T v = a[lo];\n\n        while(i <= gt) {\n            if (a[i] < v) {\n                exch(a[lt++], a[i++]);\n            } else if (a[i] > v) {\n                exch(a[i], a[gt--]);\n            } else {\n                i++;\n            }\n        }\n\n        quick_sort_3way_sub(a, lo, lt - 1);\n        quick_sort_3way_sub(a, gt + 1, hi);\n    }\n\n    template<typename T>\n    void quick_sort_3way(std::vector<T>& a) {\n        // shuffle is needed for performance guarantee\n        shuffle(a);\n\n        quick_sort_3way_sub<T>(a, 0, static_cast<int>(a.size()) - 1);\n    }\n```\n\n至此，经典的排序方法已经介绍完毕。除了选择排序和插入排序需要二次的时间复杂度外，堆排序、归并排序以及快速排序都能达到nlg(n)的时间复杂度，而这也是证明了的排序算法时间复杂度的下界，即这已经是最优算法了。但是从之前的讨论可以看到，在实际情况中，受到各种因素的限制，时间复杂度相同的算法的实际效率并不同，并且有可能相差数倍，当然，这是大O方式来衡量时间复杂度的一个弊端：即它只能忽略影响算法效率的其它因素，单单从输入规模上来看算法运行时间随输入规模的变化。从这个角度来看，虽然堆排序、归并排序以及快速排序都是最优算法，但是还可能有更快的排序算法等待着我们去发掘。\n","source":"_posts/2016-04-22-sorting-algorithms.md","raw":"---\nlayout: post\ntitle: \"排序算法\"\ndate: 2016-04-22\ntags:\n  - 算法\n---\n\n排序算法是计算机领域最经典也是研究最广泛的算法，并且是许多算法的基础。\n\n<!-- more -->\n\n## 排序算法的应用领域\n\n* **搜索**： 排过序的数据可以使用二分查找（折半查找）快速地搜索某个元素。\n* **最邻近对**： 给定n个数的集合，如何找到相差最小的一对数？如果集合已经排过序，那么一次线性查找就可以完成任务。\n* **元素唯一性** -- 给定n个数的集合，里面有重复的元素吗？这是最邻近对问题的一个特例。\n* **频率分布**： 给定n个数的集合，哪个数出现的次数最多？（求众数）。如果集合是有序的，相同的元素势必会连在一起，一次线性循环即可搞定。如果要查找任意一个元素k出现了多少次，首先用二分查找找到k，然后再往左移动，直到出现不是k的元素位置，同理也往右移动，这样便可得到k出现的次数。\n* **选择**： 一个数列里第k大的元素是哪个？如果元素已经是有序的，那么第k个元素就是我们要找的。\n* **凸包**： 给定二维平面上的n个点，求最小的能包含所有点的多边形？如果点根据x坐标进行排序，就可以按顺序把点插入（详细算法以后会专门介绍）。\n* **找到两个集合的交集**： 如果对两个集合分别排序，两个集合是否相交以及交集是多少就很容易求了。\n\n## 排序的语义\n\n排序有几个重要的语义，分述如下：\n\n* 递增还是递减顺序？\n* 使用某个键值排序还是用整个记录去排序？\n\n上述两个歧义可以通过让客户端自己指定比较函数来解决。\n\n* 遇到相同的元素怎么办？有时候即使多个记录的某个键值相同，但是这些记录间的相互顺序有可能是重要的，因为之前它们可能根据其它键值排过序。如果一个排序算法能够保持相同元素的相对顺序不变，那么称这个算法是稳定的。可惜的是比较快的算法几乎都不是稳定的。另外需要注意如果相同的元素特别多，一些系统默认的比较快的排序算法有可能会很慢！\n* 遇到非数值型的数据怎么办？比如在排序一个整形数列时遇到string类型，排序一个string类型时遇到Beijing 和PeKing 或者是 北京师范大学和北师大？它们的相互顺序应该怎么确定？\n\n## 几种排序方法的比较\n\n\n排序方法 | 原地排序 | 稳定排序 | 最差 | 平均 | 最好 | 备注\n--- | --- | --- | --- | --- | --- | ---\n选择排序 | 是 | 否 | N^2/2 | N^2/2 | N^2/2 | 只需要N次交换\n插入排序 | 是 | 是 | N^2/2 | N^2/4 | N | 通常在N很小或是数据以及部分排序的时候使用\nshell排序 | 是 | 否 | 未知 | 未知 | N | 实现代码很少，通常用于嵌入式编程，时间复杂度未知但低于二次 |\n快速排序 | 是 | 否 | N^2/2 | 2N\\lg(N) | lg(N) | 概率上保证 2N\\lg(N) 的时间复杂度，实际使用中最快的算法\n3路快速排序 | 是 | 否 | N^2/2 | 2N\\lg(N) | N | 提升快速排序在大量重复记录情况下的效率\n归并排序 | 否 | 是 | N\\lg(N) | N\\lg(N) | N\\lg(N) | 严格保证了lg(N)的时间复杂度，并且是稳定的\n堆排序 | 是 | 否 | 2N\\lg(N) | 2N\\lg(N) | N\\lg(N) | 严格保证了lg(N) 的时间复杂度，并且原地排序的（节省空间）\n？？？ | 是 | 是 | N\\lg(N) | N\\lg(N) | N\\lg(N) | 终极排序算法:)\n\n\n## 选择排序\n\n基本思想\n\n1. 输入：包含N条记录的数列A\n2. 从0 循环至 N-1\n3. 在第i次循环中，找到剩下记录中最小纪录的索引值 min\n4. 交换 A[i] 和 A[min]\n\n实现代码\n\n```c++\ntemplate<typename T>\nvoid selection_sort(std::vector<T>& a, int lo, int hi) {\n    for (int i = lo; i <= hi; ++i) {\n        int min_index = i;\n\n        for (int j = i + 1; j <= hi; ++j) {\n            if (a[min_index] > a[j]) {\n                min_index = j;\n            }\n        }\n\n        // swap a[i] and a[min_index]\n        exch(a[i], a[min_index]);\n    }\n}\n```\n\n选择排序的基本特点\n\n* 运行时间和输入没有关系，即使输入已经是有序的，也需要二次的时间复杂度\n* 选择排序的记录移动是所有算法中最小的，只有线性时间的交换\n\n## 插入排序\n\n基本思想\n\n1. 输入：包含N条记录的数列A\n2. 从0 循环至 N-1\n3. 在第i次循环中，把A[i]和位于它左边并且比它大的记录交换\n\n实现代码\n\n```\n    template<typename T>\n    void insertion_sort(std::vector<T>& a, int lo, int hi) {\n        for (int i = lo; i <= hi; ++i) {\n            for (int j = i; j > lo; --j) {\n                if (a[j] < a[j - 1]) {\n                    exch(a[j], a[j - 1]);\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n```\n\n基本特点\n\n* 如果输入记录是部分排序的话，插入排序的运行时间是线性的\n\n\n## shell 排序\n\nshell 排序是插入排序的增强版：插入排序在往左比较大小时每次只后退一步，而shell排序每次会后退多步。假设后退h步，那么得到的序列就是一个以h为间隔排序好的序列。shell排序会进行多次h排序。h的取值则从大慢慢减为1，这样做的理由是：\n\n* 当h很大时，以h为间隔的序列较小，排序可以很快完成\n* 当h变为1时，由于之前已经进行了多次h间隔排序，序列已经部分排序，因此插入排序此时的运行时间是线性的，也可以很快完成。\n\n在实际中，通常h的取值序列有多种，不同的序列会导致不一样的时间复杂度。比较容易计算的是使用 3x + 1 这个公式来产生序列\n\n实现代码\n\n```\n    template<typename T>\n    void shell_sort(std::vector<T>& a, int lo, int hi) {\n        int N = hi - lo + 1;\n\n        // decide decrease sequence\n        int h = 1;\n        while (h < N / 3) {\n            h = 3 * h + 1;\n        }\n\n        while (h >= 1) {\n            // h-sort the array\n            for (int i = h + lo; i <= hi; ++i) {\n                for (int j = i; j >= h + lo && a[j] < a[j - h]; j -= h) {\n                    exch(a[j], a[j - h]);\n                }\n            }\n            h = h / 3;\n        }\n    }\n```\n\n## 堆排序\n\n堆排序体现了好的数据结构对算法的帮助。堆排序和选择排序的原理一致，都是从剩下的记录中不断选择最小的记录出来。但是选择排序需要线性的时间去查找最小记录。而从一个集合中选择最小的记录出来是一个经典的优先队列解决的问题，如果使用堆或者平衡二叉树来实现优先队列的话，就能让这个操作变成log(N)时间。从而，借助更好的优先队列实现，堆排序把选择排序从O(n^2)复杂度提升到了O(n\\log(n))\n\n## 堆\n\n堆是实现优先队列插入和获取最小值操作的简单而高效的数据结构。他通过维持记录部分排序而非完全排序来工作，因此会比较高效。一个堆实际上可以用一个二叉树来表示（注意不是二叉搜索树！）。在一个最小堆中，一个节点的键值总是比它的子节点要小；在一个最大堆中，一个节点的键值总是比它的子节点要大。\n\n堆使用数组来实现，不需要使用任何的指针！键值在堆中的位置充当了指针的作用。在这个数组中，我们把二叉树的根节点存储在数组的第一个位置（为了方便，数组索引从1开始），相应地把它的左右两个子节点放在第二和第三的位置。一般地，我们可以把完全二叉数第l层的2^l个键值从左到右放在2^{l-1}和2^l - 1之间。并且节点之间有以下关系：\n\n* 位于位置k的结点的父结点的位置是 k / 2\n* 位于位置k的结点的子节点的位置是 2k 和 2k + 1\n\n## 如何构造一个堆\n可以通过往数组末端不断插入记录来递增地构造一个堆。在插入新记录时，堆的顺序可能会不满足预定的条件：在最小堆中新记录可能小于它的父节点，或者是在最大堆中新纪录大于它的父节点。在这种情况下，需要交换这个记录和它的父节点的位置，这称作一次上游,对这个记录不断上浮直到不能继续上游为止，就维持了堆的既有顺序。下面的代码显示了最小堆的上游代码：\n\n```\n        void swim(int k) {\n            // parent of node at k is k/2\n            while (k > 1 && pq_[k / 2] > pq_[k]) {\n                // if children's node is larger than parent, exchange\n                exch(pq_[k], pq_[k / 2]);\n\n                // swim up a level\n                k /= 2;\n            }\n        }\n```\n\n对于一个有n个记录的堆来说，一次上浮最多只需要lg(n)次操作，因此，构造堆的时间复杂度为O(n\\log(n))复杂度\n\n## 如何从堆中取得最小值\n从最小堆中取得最小的记录只需取数组的第一个元素即可，但是取完后二叉树会出现一个洞，需要把数组最后的一个记录填补到已经移除的第一个记录上；把最后一个记录移上来后可能会破坏堆的性质，如最小堆中根结点的记录可能会大于子结点，如果出现这种情况，需要将根结点和其较大的子结点交换，这称为一次下沉。下面是最小堆的下沉代码：\n\n```\n        void sink(int k) {\n            // make sure k is not the bottom level\n            while (2 * k <= N_) {\n                // j is the left children\n                int j = 2 * k;\n                if (j < N_ && pq_[j] < pq_[j + 1]) {\n                    // now, j is the bigger children\n                    j++;\n                }\n\n                if (pq_[k] > pq_[j]) {\n                    break;\n                }\n\n                // if parent node is smaller than the bigger children, exchange\n                exch(pq_[k], pq_[j]);\n\n                // sink down a level\n                k = j;\n            }\n\n        }\n```\n\n对于一个有n个记录的堆来说，一次下沉最多只需要lg(n)次操作，因此，取得最小值的操作的时间复杂度为O(\\log(n))\n\n## 更快的构建堆的方法\n\n一条一条地插入记录来构造堆的方法需要O(n\\log(n))的时间复杂度，如果记录序列全部已知，我们可以采用一种自底向上的构造方法，基本思路是从底端不是叶子结点的记录开始，做下沉操作，这样只需处理n/2个结点，这个时间复杂度基本上是线性的。下面是最大堆的下沉操作和构造方式：\n\n```\n  template<typename T>\n    void sink(std::vector<T>& a, int k, int N) {\n        // NOTE: the value of node k is a[k - 1]\n\n        // make sure k is not the bottom level\n        while (2 * k < N) {\n            // j is the left children\n            int j = 2 * k;\n            if (j < N && a[j - 1] < a[j]) {\n                // now, j is the bigger children\n                j++;\n            }\n\n            if (a[k - 1] > a[j - 1]) {\n                break;\n            }\n\n            // if parent node is smaller than the bigger children, exchange\n            exch(a[k - 1], a[j - 1]);\n\n            // sink down a level\n            k = j;\n        }\n    }\n    // Heap construction\n    for (int k = N / 2; k >= 1; --k) {\n        // loop for every non leaf node\n        sink(pq, k, N);\n    }\n```\n\n堆排序实现(这里用到了上面的最大堆的下沉方法)\n\n```\n    template<typename T>\n    void heap_sort(std::vector<T>& pq) {\n        int N = pq.size();\n\n        // Heap construction\n        for (int k = N / 2; k >= 1; --k) {\n            // loop for every non leaf node\n            sink(pq, k, N);\n        }\n\n        // Sort down\n        while(N > 1) {\n            exch(pq[0], pq[N - 1]);\n            sink(pq, 1, --N);\n        }\n    }\n```\n\n基本特点\n\n* 最坏的情况下也能达到O(n\\log(n))，这是排序算法的理论最优。\n* 缺点在于内部循环较长，无法使用缓存，并且是不稳定的，在实际中并不是最快的\n\n## 归并排序\n\n归并排序体现了分治的策略。主要思想是把大问题分解成小问题，不断递归去求解。\n\n代码实现\n\n```\n    // merge tow subarray\n    template<typename T>\n    void merge(std::vector<T>& a, std::vector<T>& aux, int lo, int mid, int hi) {\n        for (int i = lo; i <= hi; ++i) {\n            aux[i] = a[i];\n        }\n\n        int m = lo;\n        int n = mid + 1;\n        for (int i = lo; i <= hi; ++i) {\n            if (m > mid) {\n                a[i] = aux[n++];\n            } else if (n > hi) {\n                a[i] = aux[m++];\n            } else if (aux[n] < aux[m]) {\n                a[i] = aux[n++];\n            } else {\n                a[i] = aux[m++];\n            }\n        }\n    }\n\n    // resuive sort\n    const int CUTOFF = 7;\n    template<typename T>\n    void merge_sort(std::vector<T>& a, std::vector<T>& aux, int lo, int hi) {\n        if (hi <= lo) {\n            return;\n        }\n\n        // use insertion sort for small subarrays\n        if (hi <= lo + CUTOFF - 1) {\n            insertion_sort(a, lo, hi);\n            return;\n        }\n\n        int mid = lo + (hi - lo) / 2;\n        merge_sort(a, aux, lo, mid);\n        merge_sort(a, aux, mid + 1, hi);\n\n        // do not merge if already sorted\n        if (a[mid] < a[mid + 1]) {\n            return;\n        }\n\n        merge(a, aux, lo, mid, hi);\n    }\n```\n\n上述实现中借助了一个额外的aux数组来存储记录，并且在子问题规模很小时采用了插入排序。\n\n基本特点\n\n* 归并排序的平均时间复杂度为O(n\\log(n))\n* 归并排序不是原地排序，需要额外的存储空间\n\n\n## 归并排序的非递归实现\n\n基本思想\n\n1. 遍历数组，首先归并排序大小为1的子数组\n2. 继续遍历，不断归并大小为2，4，16的子数组\n\n```\n    template<typename T>\n    void bottom_up_merge_sort(std::vector<T>& a, std::vector<T>& aux, int lo, int hi) {\n        int N = hi - lo + 1;\n        for (int sz = 1; sz < N; sz += sz) {\n            for (int k = lo; k < lo + N - sz; k += (sz + sz)) {\n                merge(a, aux, k, k + sz - 1, std::min(k + sz + sz - 1, N - 1));\n            }\n        }\n    }\n```\n\n基本特点\n\n* 如果有足够的空间的话，非递归的归并排序的稳定性是工业级别的\n\n## 快速排序\n\n快速排序和归并排序类似，都是递归的算法，通过把问题分解为子问题来解决。不同的是，归并排序每次都把问题分成相同大小的两个子问题，然后通过归并操作进行合并；而快速排序则通过拆分的方式来分解问题，即每次找一个中间元素，把记录分成小于该中间元素（在中间元素左边）和大于该中间元素（在中间元素右边）的这两部分，此时中间元素已经排好序，只需对左右两边递归继续采用相同方式拆分即可。\n\n和归并排序的归并操作是线性的时间复杂度类似，快速排序的拆分操作也是线性的。归并排序和快速排序的递归分解都把问题变成了一个二叉树的结构，而归并排序的二叉树是完全二叉树，因此树高是lg(n)，而快速排序的树高则与中间元素的选取有很大的关系，为了达到了归并排序相似的树高，要求输入记录必须是无序的，研究表明，无序的二叉树插入的树高平均只比完全二叉树高36%，因此该种情况下的快速排序和归并排序的时间复杂度是相同的。当然由于快速排序加入了随机的因素，我们只能说平均情况下快速排序和归并排序的时间复杂度是相同的，也不排除很小的概率的情况下快速排序的时间复杂度为n^2\n\n基本思想\n\n* 随机打乱原始记录\n* 针对索引为j的记录进行拆分，使得：\n  * 记录a[j]位于最终已排序的位置\n  * j左边的记录没有比a[j]大的\n  * j右边的记录没有比a[j]小的\n* 对拆分后的各个部分递归进行上述处理\n\n代码实现\n\n```\n    template<typename T>\n    int partition(std::vector<T>& a, int lo, int hi) {\n        int i = lo;\n        int j = hi + 1;\n\n        while(true) {\n            // process i pointer\n            // find item on left to swap\n            while(a[++i] < a[lo]) {\n                if (i == hi) {\n                    break;\n                }\n            }\n\n            // process j pointer\n            // find item on right to swap\n            while(a[--j] > a[lo]) {\n                if (j == lo) {\n                    break;\n                }\n            }\n\n            // find if pointers cross\n            if (i >= j) {\n                break;\n            }\n\n            // swap\n            exch(a[i], a[j]);\n        }\n\n        // swap with partition item\n        exch(a[lo], a[j]);\n\n        // return index of item now known to be in place\n        return j;\n    }\n\n\n    template<typename T>\n    void quick_sort_sub(std::vector<T>& a, int lo, int hi) {\n        if (hi <= lo + CUTOFF) {\n            // improvement 1:  use insertion fort for small subarray\n            insertion_sort(a, lo, hi);\n            return;\n        }\n\n        // improvement 2: estimate partition item with median of three samples\n        int m = median_of_three(a, lo, lo + (hi - lo)/ 2, hi);\n        exch(a[lo], a[m]);\n\n        int j = partition(a, lo, hi);\n        quick_sort_sub(a, lo, j - 1);\n        quick_sort_sub(a, j + 1, hi);\n    }\n\n    template<typename T>\n    void quick_sort(std::vector<T>& a) {\n        // shuffle is needed for performance guarantee\n        shuffle(a);\n\n        quick_sort_sub<T>(a, 0, static_cast<int>(a.size()) - 1);\n    }\n```\n\n上面的代码使用了两个提升：和归并排序中一样，我们在记录序列很小时采用了插入排序；另外我们本来是采用随机打乱后的记录顺序来选取中间值，为了让得到的二叉树更加平衡，我们需要选择接近数列中位数的记录作为中间值，这里我们采用了抽样的方式来计算中值。\n\n基本特点\n\n虽然快速排序理论上只能在概率上趋近于nlg(n)的时间复杂度，但是由于它的内层循环较小，并且容易利用计算机缓存等原因，一个设计得很好的快速排序的效率是归并排序和堆排序的2-3倍！\n\n在实际应用中，如果记录有许多重复的话，会发现快速排序接近于n^2的时间复杂度，这时候我们需要使用快速排序的改进版：3路快速排序\n\n## 3路快速排序\n\n基本思想是：\n\n* 把记录序列查分成3部分（而不是之前的两部分）\n* 在lt和gt中间的记录都等于中间元素\n* lt左边的记录都不大于中间元素\n* lt右边的记录都不小于中间元素\n\n实现代码\n\n```\n    // * Let v be partitioning item a[lo].\n    // * Scan i from left to right.\n    //  - (a[i] < v): exchange a[lt] with a[i]; increment both lt and i\n    //  - (a[i] > v): exchange a[gt] with a[i]; decrement gt;\n    //  - (a[i] == v): increment i\n    template<typename T>\n    void quick_sort_3way_sub(std::vector<T>& a, int lo, int hi) {\n        if (hi <= lo + CUTOFF) {\n            // improvement 1:  use insertion fort for small subarray\n            insertion_sort(a, lo, hi);\n            return;\n        }\n\n        int lt = lo;\n        int i = lo;\n        int gt = hi;\n\n        // improvement 2: estimate partition item with median of three samples\n        int m = median_of_three(a, lo, lo + (hi - lo)/ 2, hi);\n        exch(a[lo], a[m]);\n\n        // partition item\n        T v = a[lo];\n\n        while(i <= gt) {\n            if (a[i] < v) {\n                exch(a[lt++], a[i++]);\n            } else if (a[i] > v) {\n                exch(a[i], a[gt--]);\n            } else {\n                i++;\n            }\n        }\n\n        quick_sort_3way_sub(a, lo, lt - 1);\n        quick_sort_3way_sub(a, gt + 1, hi);\n    }\n\n    template<typename T>\n    void quick_sort_3way(std::vector<T>& a) {\n        // shuffle is needed for performance guarantee\n        shuffle(a);\n\n        quick_sort_3way_sub<T>(a, 0, static_cast<int>(a.size()) - 1);\n    }\n```\n\n至此，经典的排序方法已经介绍完毕。除了选择排序和插入排序需要二次的时间复杂度外，堆排序、归并排序以及快速排序都能达到nlg(n)的时间复杂度，而这也是证明了的排序算法时间复杂度的下界，即这已经是最优算法了。但是从之前的讨论可以看到，在实际情况中，受到各种因素的限制，时间复杂度相同的算法的实际效率并不同，并且有可能相差数倍，当然，这是大O方式来衡量时间复杂度的一个弊端：即它只能忽略影响算法效率的其它因素，单单从输入规模上来看算法运行时间随输入规模的变化。从这个角度来看，虽然堆排序、归并排序以及快速排序都是最优算法，但是还可能有更快的排序算法等待着我们去发掘。\n","slug":"sorting-algorithms","published":1,"updated":"2016-08-25T14:31:12.000Z","_id":"cisadnf8o0000hdjco620dngh","comments":1,"photos":[],"link":"","content":"<p>排序算法是计算机领域最经典也是研究最广泛的算法，并且是许多算法的基础。</p>\n<a id=\"more\"></a>\n<h2 id=\"排序算法的应用领域\"><a href=\"#排序算法的应用领域\" class=\"headerlink\" title=\"排序算法的应用领域\"></a>排序算法的应用领域</h2><ul>\n<li><strong>搜索</strong>： 排过序的数据可以使用二分查找（折半查找）快速地搜索某个元素。</li>\n<li><strong>最邻近对</strong>： 给定n个数的集合，如何找到相差最小的一对数？如果集合已经排过序，那么一次线性查找就可以完成任务。</li>\n<li><strong>元素唯一性</strong> – 给定n个数的集合，里面有重复的元素吗？这是最邻近对问题的一个特例。</li>\n<li><strong>频率分布</strong>： 给定n个数的集合，哪个数出现的次数最多？（求众数）。如果集合是有序的，相同的元素势必会连在一起，一次线性循环即可搞定。如果要查找任意一个元素k出现了多少次，首先用二分查找找到k，然后再往左移动，直到出现不是k的元素位置，同理也往右移动，这样便可得到k出现的次数。</li>\n<li><strong>选择</strong>： 一个数列里第k大的元素是哪个？如果元素已经是有序的，那么第k个元素就是我们要找的。</li>\n<li><strong>凸包</strong>： 给定二维平面上的n个点，求最小的能包含所有点的多边形？如果点根据x坐标进行排序，就可以按顺序把点插入（详细算法以后会专门介绍）。</li>\n<li><strong>找到两个集合的交集</strong>： 如果对两个集合分别排序，两个集合是否相交以及交集是多少就很容易求了。</li>\n</ul>\n<h2 id=\"排序的语义\"><a href=\"#排序的语义\" class=\"headerlink\" title=\"排序的语义\"></a>排序的语义</h2><p>排序有几个重要的语义，分述如下：</p>\n<ul>\n<li>递增还是递减顺序？</li>\n<li>使用某个键值排序还是用整个记录去排序？</li>\n</ul>\n<p>上述两个歧义可以通过让客户端自己指定比较函数来解决。</p>\n<ul>\n<li>遇到相同的元素怎么办？有时候即使多个记录的某个键值相同，但是这些记录间的相互顺序有可能是重要的，因为之前它们可能根据其它键值排过序。如果一个排序算法能够保持相同元素的相对顺序不变，那么称这个算法是稳定的。可惜的是比较快的算法几乎都不是稳定的。另外需要注意如果相同的元素特别多，一些系统默认的比较快的排序算法有可能会很慢！</li>\n<li>遇到非数值型的数据怎么办？比如在排序一个整形数列时遇到string类型，排序一个string类型时遇到Beijing 和PeKing 或者是 北京师范大学和北师大？它们的相互顺序应该怎么确定？</li>\n</ul>\n<h2 id=\"几种排序方法的比较\"><a href=\"#几种排序方法的比较\" class=\"headerlink\" title=\"几种排序方法的比较\"></a>几种排序方法的比较</h2><table>\n<thead>\n<tr>\n<th>排序方法</th>\n<th>原地排序</th>\n<th>稳定排序</th>\n<th>最差</th>\n<th>平均</th>\n<th>最好</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>选择排序</td>\n<td>是</td>\n<td>否</td>\n<td>N^2/2</td>\n<td>N^2/2</td>\n<td>N^2/2</td>\n<td>只需要N次交换</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>是</td>\n<td>是</td>\n<td>N^2/2</td>\n<td>N^2/4</td>\n<td>N</td>\n<td>通常在N很小或是数据以及部分排序的时候使用</td>\n</tr>\n<tr>\n<td>shell排序</td>\n<td>是</td>\n<td>否</td>\n<td>未知</td>\n<td>未知</td>\n<td>N</td>\n<td>实现代码很少，通常用于嵌入式编程，时间复杂度未知但低于二次</td>\n<td></td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>是</td>\n<td>否</td>\n<td>N^2/2</td>\n<td>2N\\lg(N)</td>\n<td>lg(N)</td>\n<td>概率上保证 2N\\lg(N) 的时间复杂度，实际使用中最快的算法</td>\n</tr>\n<tr>\n<td>3路快速排序</td>\n<td>是</td>\n<td>否</td>\n<td>N^2/2</td>\n<td>2N\\lg(N)</td>\n<td>N</td>\n<td>提升快速排序在大量重复记录情况下的效率</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>否</td>\n<td>是</td>\n<td>N\\lg(N)</td>\n<td>N\\lg(N)</td>\n<td>N\\lg(N)</td>\n<td>严格保证了lg(N)的时间复杂度，并且是稳定的</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>是</td>\n<td>否</td>\n<td>2N\\lg(N)</td>\n<td>2N\\lg(N)</td>\n<td>N\\lg(N)</td>\n<td>严格保证了lg(N) 的时间复杂度，并且原地排序的（节省空间）</td>\n</tr>\n<tr>\n<td>？？？</td>\n<td>是</td>\n<td>是</td>\n<td>N\\lg(N)</td>\n<td>N\\lg(N)</td>\n<td>N\\lg(N)</td>\n<td>终极排序算法:)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><p>基本思想</p>\n<ol>\n<li>输入：包含N条记录的数列A</li>\n<li>从0 循环至 N-1</li>\n<li>在第i次循环中，找到剩下记录中最小纪录的索引值 min</li>\n<li>交换 A[i] 和 A[min]</li>\n</ol>\n<p>实现代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">selection_sort</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;T&gt;&amp; a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo; i &lt;= hi; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> min_index = i;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt;= hi; ++j) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (a[min_index] &gt; a[j]) &#123;</div><div class=\"line\">                min_index = j;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// swap a[i] and a[min_index]</span></div><div class=\"line\">        exch(a[i], a[min_index]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>选择排序的基本特点</p>\n<ul>\n<li>运行时间和输入没有关系，即使输入已经是有序的，也需要二次的时间复杂度</li>\n<li>选择排序的记录移动是所有算法中最小的，只有线性时间的交换</li>\n</ul>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><p>基本思想</p>\n<ol>\n<li>输入：包含N条记录的数列A</li>\n<li>从0 循环至 N-1</li>\n<li>在第i次循环中，把A[i]和位于它左边并且比它大的记录交换</li>\n</ol>\n<p>实现代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void insertion_sort(std::vector&lt;T&gt;&amp; a, int lo, int hi) &#123;</div><div class=\"line\">    for (int i = lo; i &lt;= hi; ++i) &#123;</div><div class=\"line\">        for (int j = i; j &gt; lo; --j) &#123;</div><div class=\"line\">            if (a[j] &lt; a[j - 1]) &#123;</div><div class=\"line\">                exch(a[j], a[j - 1]);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>基本特点</p>\n<ul>\n<li>如果输入记录是部分排序的话，插入排序的运行时间是线性的</li>\n</ul>\n<h2 id=\"shell-排序\"><a href=\"#shell-排序\" class=\"headerlink\" title=\"shell 排序\"></a>shell 排序</h2><p>shell 排序是插入排序的增强版：插入排序在往左比较大小时每次只后退一步，而shell排序每次会后退多步。假设后退h步，那么得到的序列就是一个以h为间隔排序好的序列。shell排序会进行多次h排序。h的取值则从大慢慢减为1，这样做的理由是：</p>\n<ul>\n<li>当h很大时，以h为间隔的序列较小，排序可以很快完成</li>\n<li>当h变为1时，由于之前已经进行了多次h间隔排序，序列已经部分排序，因此插入排序此时的运行时间是线性的，也可以很快完成。</li>\n</ul>\n<p>在实际中，通常h的取值序列有多种，不同的序列会导致不一样的时间复杂度。比较容易计算的是使用 3x + 1 这个公式来产生序列</p>\n<p>实现代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void shell_sort(std::vector&lt;T&gt;&amp; a, int lo, int hi) &#123;</div><div class=\"line\">    int N = hi - lo + 1;</div><div class=\"line\"></div><div class=\"line\">    // decide decrease sequence</div><div class=\"line\">    int h = 1;</div><div class=\"line\">    while (h &lt; N / 3) &#123;</div><div class=\"line\">        h = 3 * h + 1;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    while (h &gt;= 1) &#123;</div><div class=\"line\">        // h-sort the array</div><div class=\"line\">        for (int i = h + lo; i &lt;= hi; ++i) &#123;</div><div class=\"line\">            for (int j = i; j &gt;= h + lo &amp;&amp; a[j] &lt; a[j - h]; j -= h) &#123;</div><div class=\"line\">                exch(a[j], a[j - h]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        h = h / 3;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><p>堆排序体现了好的数据结构对算法的帮助。堆排序和选择排序的原理一致，都是从剩下的记录中不断选择最小的记录出来。但是选择排序需要线性的时间去查找最小记录。而从一个集合中选择最小的记录出来是一个经典的优先队列解决的问题，如果使用堆或者平衡二叉树来实现优先队列的话，就能让这个操作变成log(N)时间。从而，借助更好的优先队列实现，堆排序把选择排序从O(n^2)复杂度提升到了O(n\\log(n))</p>\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><p>堆是实现优先队列插入和获取最小值操作的简单而高效的数据结构。他通过维持记录部分排序而非完全排序来工作，因此会比较高效。一个堆实际上可以用一个二叉树来表示（注意不是二叉搜索树！）。在一个最小堆中，一个节点的键值总是比它的子节点要小；在一个最大堆中，一个节点的键值总是比它的子节点要大。</p>\n<p>堆使用数组来实现，不需要使用任何的指针！键值在堆中的位置充当了指针的作用。在这个数组中，我们把二叉树的根节点存储在数组的第一个位置（为了方便，数组索引从1开始），相应地把它的左右两个子节点放在第二和第三的位置。一般地，我们可以把完全二叉数第l层的2^l个键值从左到右放在2^{l-1}和2^l - 1之间。并且节点之间有以下关系：</p>\n<ul>\n<li>位于位置k的结点的父结点的位置是 k / 2</li>\n<li>位于位置k的结点的子节点的位置是 2k 和 2k + 1</li>\n</ul>\n<h2 id=\"如何构造一个堆\"><a href=\"#如何构造一个堆\" class=\"headerlink\" title=\"如何构造一个堆\"></a>如何构造一个堆</h2><p>可以通过往数组末端不断插入记录来递增地构造一个堆。在插入新记录时，堆的顺序可能会不满足预定的条件：在最小堆中新记录可能小于它的父节点，或者是在最大堆中新纪录大于它的父节点。在这种情况下，需要交换这个记录和它的父节点的位置，这称作一次上游,对这个记录不断上浮直到不能继续上游为止，就维持了堆的既有顺序。下面的代码显示了最小堆的上游代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">void swim(int k) &#123;</div><div class=\"line\">    // parent of node at k is k/2</div><div class=\"line\">    while (k &gt; 1 &amp;&amp; pq_[k / 2] &gt; pq_[k]) &#123;</div><div class=\"line\">        // if children&apos;s node is larger than parent, exchange</div><div class=\"line\">        exch(pq_[k], pq_[k / 2]);</div><div class=\"line\"></div><div class=\"line\">        // swim up a level</div><div class=\"line\">        k /= 2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于一个有n个记录的堆来说，一次上浮最多只需要lg(n)次操作，因此，构造堆的时间复杂度为O(n\\log(n))复杂度</p>\n<h2 id=\"如何从堆中取得最小值\"><a href=\"#如何从堆中取得最小值\" class=\"headerlink\" title=\"如何从堆中取得最小值\"></a>如何从堆中取得最小值</h2><p>从最小堆中取得最小的记录只需取数组的第一个元素即可，但是取完后二叉树会出现一个洞，需要把数组最后的一个记录填补到已经移除的第一个记录上；把最后一个记录移上来后可能会破坏堆的性质，如最小堆中根结点的记录可能会大于子结点，如果出现这种情况，需要将根结点和其较大的子结点交换，这称为一次下沉。下面是最小堆的下沉代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">void sink(int k) &#123;</div><div class=\"line\">    // make sure k is not the bottom level</div><div class=\"line\">    while (2 * k &lt;= N_) &#123;</div><div class=\"line\">        // j is the left children</div><div class=\"line\">        int j = 2 * k;</div><div class=\"line\">        if (j &lt; N_ &amp;&amp; pq_[j] &lt; pq_[j + 1]) &#123;</div><div class=\"line\">            // now, j is the bigger children</div><div class=\"line\">            j++;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (pq_[k] &gt; pq_[j]) &#123;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // if parent node is smaller than the bigger children, exchange</div><div class=\"line\">        exch(pq_[k], pq_[j]);</div><div class=\"line\"></div><div class=\"line\">        // sink down a level</div><div class=\"line\">        k = j;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于一个有n个记录的堆来说，一次下沉最多只需要lg(n)次操作，因此，取得最小值的操作的时间复杂度为O(\\log(n))</p>\n<h2 id=\"更快的构建堆的方法\"><a href=\"#更快的构建堆的方法\" class=\"headerlink\" title=\"更快的构建堆的方法\"></a>更快的构建堆的方法</h2><p>一条一条地插入记录来构造堆的方法需要O(n\\log(n))的时间复杂度，如果记录序列全部已知，我们可以采用一种自底向上的构造方法，基本思路是从底端不是叶子结点的记录开始，做下沉操作，这样只需处理n/2个结点，这个时间复杂度基本上是线性的。下面是最大堆的下沉操作和构造方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">  void sink(std::vector&lt;T&gt;&amp; a, int k, int N) &#123;</div><div class=\"line\">      // NOTE: the value of node k is a[k - 1]</div><div class=\"line\"></div><div class=\"line\">      // make sure k is not the bottom level</div><div class=\"line\">      while (2 * k &lt; N) &#123;</div><div class=\"line\">          // j is the left children</div><div class=\"line\">          int j = 2 * k;</div><div class=\"line\">          if (j &lt; N &amp;&amp; a[j - 1] &lt; a[j]) &#123;</div><div class=\"line\">              // now, j is the bigger children</div><div class=\"line\">              j++;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          if (a[k - 1] &gt; a[j - 1]) &#123;</div><div class=\"line\">              break;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          // if parent node is smaller than the bigger children, exchange</div><div class=\"line\">          exch(a[k - 1], a[j - 1]);</div><div class=\"line\"></div><div class=\"line\">          // sink down a level</div><div class=\"line\">          k = j;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  // Heap construction</div><div class=\"line\">  for (int k = N / 2; k &gt;= 1; --k) &#123;</div><div class=\"line\">      // loop for every non leaf node</div><div class=\"line\">      sink(pq, k, N);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>堆排序实现(这里用到了上面的最大堆的下沉方法)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void heap_sort(std::vector&lt;T&gt;&amp; pq) &#123;</div><div class=\"line\">    int N = pq.size();</div><div class=\"line\"></div><div class=\"line\">    // Heap construction</div><div class=\"line\">    for (int k = N / 2; k &gt;= 1; --k) &#123;</div><div class=\"line\">        // loop for every non leaf node</div><div class=\"line\">        sink(pq, k, N);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // Sort down</div><div class=\"line\">    while(N &gt; 1) &#123;</div><div class=\"line\">        exch(pq[0], pq[N - 1]);</div><div class=\"line\">        sink(pq, 1, --N);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>基本特点</p>\n<ul>\n<li>最坏的情况下也能达到O(n\\log(n))，这是排序算法的理论最优。</li>\n<li>缺点在于内部循环较长，无法使用缓存，并且是不稳定的，在实际中并不是最快的</li>\n</ul>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p>归并排序体现了分治的策略。主要思想是把大问题分解成小问题，不断递归去求解。</p>\n<p>代码实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">// merge tow subarray</div><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void merge(std::vector&lt;T&gt;&amp; a, std::vector&lt;T&gt;&amp; aux, int lo, int mid, int hi) &#123;</div><div class=\"line\">    for (int i = lo; i &lt;= hi; ++i) &#123;</div><div class=\"line\">        aux[i] = a[i];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int m = lo;</div><div class=\"line\">    int n = mid + 1;</div><div class=\"line\">    for (int i = lo; i &lt;= hi; ++i) &#123;</div><div class=\"line\">        if (m &gt; mid) &#123;</div><div class=\"line\">            a[i] = aux[n++];</div><div class=\"line\">        &#125; else if (n &gt; hi) &#123;</div><div class=\"line\">            a[i] = aux[m++];</div><div class=\"line\">        &#125; else if (aux[n] &lt; aux[m]) &#123;</div><div class=\"line\">            a[i] = aux[n++];</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            a[i] = aux[m++];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// resuive sort</div><div class=\"line\">const int CUTOFF = 7;</div><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void merge_sort(std::vector&lt;T&gt;&amp; a, std::vector&lt;T&gt;&amp; aux, int lo, int hi) &#123;</div><div class=\"line\">    if (hi &lt;= lo) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // use insertion sort for small subarrays</div><div class=\"line\">    if (hi &lt;= lo + CUTOFF - 1) &#123;</div><div class=\"line\">        insertion_sort(a, lo, hi);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int mid = lo + (hi - lo) / 2;</div><div class=\"line\">    merge_sort(a, aux, lo, mid);</div><div class=\"line\">    merge_sort(a, aux, mid + 1, hi);</div><div class=\"line\"></div><div class=\"line\">    // do not merge if already sorted</div><div class=\"line\">    if (a[mid] &lt; a[mid + 1]) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    merge(a, aux, lo, mid, hi);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述实现中借助了一个额外的aux数组来存储记录，并且在子问题规模很小时采用了插入排序。</p>\n<p>基本特点</p>\n<ul>\n<li>归并排序的平均时间复杂度为O(n\\log(n))</li>\n<li>归并排序不是原地排序，需要额外的存储空间</li>\n</ul>\n<h2 id=\"归并排序的非递归实现\"><a href=\"#归并排序的非递归实现\" class=\"headerlink\" title=\"归并排序的非递归实现\"></a>归并排序的非递归实现</h2><p>基本思想</p>\n<ol>\n<li>遍历数组，首先归并排序大小为1的子数组</li>\n<li>继续遍历，不断归并大小为2，4，16的子数组</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void bottom_up_merge_sort(std::vector&lt;T&gt;&amp; a, std::vector&lt;T&gt;&amp; aux, int lo, int hi) &#123;</div><div class=\"line\">    int N = hi - lo + 1;</div><div class=\"line\">    for (int sz = 1; sz &lt; N; sz += sz) &#123;</div><div class=\"line\">        for (int k = lo; k &lt; lo + N - sz; k += (sz + sz)) &#123;</div><div class=\"line\">            merge(a, aux, k, k + sz - 1, std::min(k + sz + sz - 1, N - 1));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>基本特点</p>\n<ul>\n<li>如果有足够的空间的话，非递归的归并排序的稳定性是工业级别的</li>\n</ul>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>快速排序和归并排序类似，都是递归的算法，通过把问题分解为子问题来解决。不同的是，归并排序每次都把问题分成相同大小的两个子问题，然后通过归并操作进行合并；而快速排序则通过拆分的方式来分解问题，即每次找一个中间元素，把记录分成小于该中间元素（在中间元素左边）和大于该中间元素（在中间元素右边）的这两部分，此时中间元素已经排好序，只需对左右两边递归继续采用相同方式拆分即可。</p>\n<p>和归并排序的归并操作是线性的时间复杂度类似，快速排序的拆分操作也是线性的。归并排序和快速排序的递归分解都把问题变成了一个二叉树的结构，而归并排序的二叉树是完全二叉树，因此树高是lg(n)，而快速排序的树高则与中间元素的选取有很大的关系，为了达到了归并排序相似的树高，要求输入记录必须是无序的，研究表明，无序的二叉树插入的树高平均只比完全二叉树高36%，因此该种情况下的快速排序和归并排序的时间复杂度是相同的。当然由于快速排序加入了随机的因素，我们只能说平均情况下快速排序和归并排序的时间复杂度是相同的，也不排除很小的概率的情况下快速排序的时间复杂度为n^2</p>\n<p>基本思想</p>\n<ul>\n<li>随机打乱原始记录</li>\n<li>针对索引为j的记录进行拆分，使得：<ul>\n<li>记录a[j]位于最终已排序的位置</li>\n<li>j左边的记录没有比a[j]大的</li>\n<li>j右边的记录没有比a[j]小的</li>\n</ul>\n</li>\n<li>对拆分后的各个部分递归进行上述处理</li>\n</ul>\n<p>代码实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">int partition(std::vector&lt;T&gt;&amp; a, int lo, int hi) &#123;</div><div class=\"line\">    int i = lo;</div><div class=\"line\">    int j = hi + 1;</div><div class=\"line\"></div><div class=\"line\">    while(true) &#123;</div><div class=\"line\">        // process i pointer</div><div class=\"line\">        // find item on left to swap</div><div class=\"line\">        while(a[++i] &lt; a[lo]) &#123;</div><div class=\"line\">            if (i == hi) &#123;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // process j pointer</div><div class=\"line\">        // find item on right to swap</div><div class=\"line\">        while(a[--j] &gt; a[lo]) &#123;</div><div class=\"line\">            if (j == lo) &#123;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // find if pointers cross</div><div class=\"line\">        if (i &gt;= j) &#123;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // swap</div><div class=\"line\">        exch(a[i], a[j]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // swap with partition item</div><div class=\"line\">    exch(a[lo], a[j]);</div><div class=\"line\"></div><div class=\"line\">    // return index of item now known to be in place</div><div class=\"line\">    return j;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void quick_sort_sub(std::vector&lt;T&gt;&amp; a, int lo, int hi) &#123;</div><div class=\"line\">    if (hi &lt;= lo + CUTOFF) &#123;</div><div class=\"line\">        // improvement 1:  use insertion fort for small subarray</div><div class=\"line\">        insertion_sort(a, lo, hi);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // improvement 2: estimate partition item with median of three samples</div><div class=\"line\">    int m = median_of_three(a, lo, lo + (hi - lo)/ 2, hi);</div><div class=\"line\">    exch(a[lo], a[m]);</div><div class=\"line\"></div><div class=\"line\">    int j = partition(a, lo, hi);</div><div class=\"line\">    quick_sort_sub(a, lo, j - 1);</div><div class=\"line\">    quick_sort_sub(a, j + 1, hi);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void quick_sort(std::vector&lt;T&gt;&amp; a) &#123;</div><div class=\"line\">    // shuffle is needed for performance guarantee</div><div class=\"line\">    shuffle(a);</div><div class=\"line\"></div><div class=\"line\">    quick_sort_sub&lt;T&gt;(a, 0, static_cast&lt;int&gt;(a.size()) - 1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的代码使用了两个提升：和归并排序中一样，我们在记录序列很小时采用了插入排序；另外我们本来是采用随机打乱后的记录顺序来选取中间值，为了让得到的二叉树更加平衡，我们需要选择接近数列中位数的记录作为中间值，这里我们采用了抽样的方式来计算中值。</p>\n<p>基本特点</p>\n<p>虽然快速排序理论上只能在概率上趋近于nlg(n)的时间复杂度，但是由于它的内层循环较小，并且容易利用计算机缓存等原因，一个设计得很好的快速排序的效率是归并排序和堆排序的2-3倍！</p>\n<p>在实际应用中，如果记录有许多重复的话，会发现快速排序接近于n^2的时间复杂度，这时候我们需要使用快速排序的改进版：3路快速排序</p>\n<h2 id=\"3路快速排序\"><a href=\"#3路快速排序\" class=\"headerlink\" title=\"3路快速排序\"></a>3路快速排序</h2><p>基本思想是：</p>\n<ul>\n<li>把记录序列查分成3部分（而不是之前的两部分）</li>\n<li>在lt和gt中间的记录都等于中间元素</li>\n<li>lt左边的记录都不大于中间元素</li>\n<li>lt右边的记录都不小于中间元素</li>\n</ul>\n<p>实现代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">// * Let v be partitioning item a[lo].</div><div class=\"line\">// * Scan i from left to right.</div><div class=\"line\">//  - (a[i] &lt; v): exchange a[lt] with a[i]; increment both lt and i</div><div class=\"line\">//  - (a[i] &gt; v): exchange a[gt] with a[i]; decrement gt;</div><div class=\"line\">//  - (a[i] == v): increment i</div><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void quick_sort_3way_sub(std::vector&lt;T&gt;&amp; a, int lo, int hi) &#123;</div><div class=\"line\">    if (hi &lt;= lo + CUTOFF) &#123;</div><div class=\"line\">        // improvement 1:  use insertion fort for small subarray</div><div class=\"line\">        insertion_sort(a, lo, hi);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int lt = lo;</div><div class=\"line\">    int i = lo;</div><div class=\"line\">    int gt = hi;</div><div class=\"line\"></div><div class=\"line\">    // improvement 2: estimate partition item with median of three samples</div><div class=\"line\">    int m = median_of_three(a, lo, lo + (hi - lo)/ 2, hi);</div><div class=\"line\">    exch(a[lo], a[m]);</div><div class=\"line\"></div><div class=\"line\">    // partition item</div><div class=\"line\">    T v = a[lo];</div><div class=\"line\"></div><div class=\"line\">    while(i &lt;= gt) &#123;</div><div class=\"line\">        if (a[i] &lt; v) &#123;</div><div class=\"line\">            exch(a[lt++], a[i++]);</div><div class=\"line\">        &#125; else if (a[i] &gt; v) &#123;</div><div class=\"line\">            exch(a[i], a[gt--]);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    quick_sort_3way_sub(a, lo, lt - 1);</div><div class=\"line\">    quick_sort_3way_sub(a, gt + 1, hi);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void quick_sort_3way(std::vector&lt;T&gt;&amp; a) &#123;</div><div class=\"line\">    // shuffle is needed for performance guarantee</div><div class=\"line\">    shuffle(a);</div><div class=\"line\"></div><div class=\"line\">    quick_sort_3way_sub&lt;T&gt;(a, 0, static_cast&lt;int&gt;(a.size()) - 1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，经典的排序方法已经介绍完毕。除了选择排序和插入排序需要二次的时间复杂度外，堆排序、归并排序以及快速排序都能达到nlg(n)的时间复杂度，而这也是证明了的排序算法时间复杂度的下界，即这已经是最优算法了。但是从之前的讨论可以看到，在实际情况中，受到各种因素的限制，时间复杂度相同的算法的实际效率并不同，并且有可能相差数倍，当然，这是大O方式来衡量时间复杂度的一个弊端：即它只能忽略影响算法效率的其它因素，单单从输入规模上来看算法运行时间随输入规模的变化。从这个角度来看，虽然堆排序、归并排序以及快速排序都是最优算法，但是还可能有更快的排序算法等待着我们去发掘。</p>\n","excerpt":"<p>排序算法是计算机领域最经典也是研究最广泛的算法，并且是许多算法的基础。</p>","more":"<h2 id=\"排序算法的应用领域\"><a href=\"#排序算法的应用领域\" class=\"headerlink\" title=\"排序算法的应用领域\"></a>排序算法的应用领域</h2><ul>\n<li><strong>搜索</strong>： 排过序的数据可以使用二分查找（折半查找）快速地搜索某个元素。</li>\n<li><strong>最邻近对</strong>： 给定n个数的集合，如何找到相差最小的一对数？如果集合已经排过序，那么一次线性查找就可以完成任务。</li>\n<li><strong>元素唯一性</strong> – 给定n个数的集合，里面有重复的元素吗？这是最邻近对问题的一个特例。</li>\n<li><strong>频率分布</strong>： 给定n个数的集合，哪个数出现的次数最多？（求众数）。如果集合是有序的，相同的元素势必会连在一起，一次线性循环即可搞定。如果要查找任意一个元素k出现了多少次，首先用二分查找找到k，然后再往左移动，直到出现不是k的元素位置，同理也往右移动，这样便可得到k出现的次数。</li>\n<li><strong>选择</strong>： 一个数列里第k大的元素是哪个？如果元素已经是有序的，那么第k个元素就是我们要找的。</li>\n<li><strong>凸包</strong>： 给定二维平面上的n个点，求最小的能包含所有点的多边形？如果点根据x坐标进行排序，就可以按顺序把点插入（详细算法以后会专门介绍）。</li>\n<li><strong>找到两个集合的交集</strong>： 如果对两个集合分别排序，两个集合是否相交以及交集是多少就很容易求了。</li>\n</ul>\n<h2 id=\"排序的语义\"><a href=\"#排序的语义\" class=\"headerlink\" title=\"排序的语义\"></a>排序的语义</h2><p>排序有几个重要的语义，分述如下：</p>\n<ul>\n<li>递增还是递减顺序？</li>\n<li>使用某个键值排序还是用整个记录去排序？</li>\n</ul>\n<p>上述两个歧义可以通过让客户端自己指定比较函数来解决。</p>\n<ul>\n<li>遇到相同的元素怎么办？有时候即使多个记录的某个键值相同，但是这些记录间的相互顺序有可能是重要的，因为之前它们可能根据其它键值排过序。如果一个排序算法能够保持相同元素的相对顺序不变，那么称这个算法是稳定的。可惜的是比较快的算法几乎都不是稳定的。另外需要注意如果相同的元素特别多，一些系统默认的比较快的排序算法有可能会很慢！</li>\n<li>遇到非数值型的数据怎么办？比如在排序一个整形数列时遇到string类型，排序一个string类型时遇到Beijing 和PeKing 或者是 北京师范大学和北师大？它们的相互顺序应该怎么确定？</li>\n</ul>\n<h2 id=\"几种排序方法的比较\"><a href=\"#几种排序方法的比较\" class=\"headerlink\" title=\"几种排序方法的比较\"></a>几种排序方法的比较</h2><table>\n<thead>\n<tr>\n<th>排序方法</th>\n<th>原地排序</th>\n<th>稳定排序</th>\n<th>最差</th>\n<th>平均</th>\n<th>最好</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>选择排序</td>\n<td>是</td>\n<td>否</td>\n<td>N^2/2</td>\n<td>N^2/2</td>\n<td>N^2/2</td>\n<td>只需要N次交换</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>是</td>\n<td>是</td>\n<td>N^2/2</td>\n<td>N^2/4</td>\n<td>N</td>\n<td>通常在N很小或是数据以及部分排序的时候使用</td>\n</tr>\n<tr>\n<td>shell排序</td>\n<td>是</td>\n<td>否</td>\n<td>未知</td>\n<td>未知</td>\n<td>N</td>\n<td>实现代码很少，通常用于嵌入式编程，时间复杂度未知但低于二次</td>\n<td></td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>是</td>\n<td>否</td>\n<td>N^2/2</td>\n<td>2N\\lg(N)</td>\n<td>lg(N)</td>\n<td>概率上保证 2N\\lg(N) 的时间复杂度，实际使用中最快的算法</td>\n</tr>\n<tr>\n<td>3路快速排序</td>\n<td>是</td>\n<td>否</td>\n<td>N^2/2</td>\n<td>2N\\lg(N)</td>\n<td>N</td>\n<td>提升快速排序在大量重复记录情况下的效率</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>否</td>\n<td>是</td>\n<td>N\\lg(N)</td>\n<td>N\\lg(N)</td>\n<td>N\\lg(N)</td>\n<td>严格保证了lg(N)的时间复杂度，并且是稳定的</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>是</td>\n<td>否</td>\n<td>2N\\lg(N)</td>\n<td>2N\\lg(N)</td>\n<td>N\\lg(N)</td>\n<td>严格保证了lg(N) 的时间复杂度，并且原地排序的（节省空间）</td>\n</tr>\n<tr>\n<td>？？？</td>\n<td>是</td>\n<td>是</td>\n<td>N\\lg(N)</td>\n<td>N\\lg(N)</td>\n<td>N\\lg(N)</td>\n<td>终极排序算法:)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><p>基本思想</p>\n<ol>\n<li>输入：包含N条记录的数列A</li>\n<li>从0 循环至 N-1</li>\n<li>在第i次循环中，找到剩下记录中最小纪录的索引值 min</li>\n<li>交换 A[i] 和 A[min]</li>\n</ol>\n<p>实现代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">selection_sort</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;T&gt;&amp; a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo; i &lt;= hi; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> min_index = i;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt;= hi; ++j) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (a[min_index] &gt; a[j]) &#123;</div><div class=\"line\">                min_index = j;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// swap a[i] and a[min_index]</span></div><div class=\"line\">        exch(a[i], a[min_index]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>选择排序的基本特点</p>\n<ul>\n<li>运行时间和输入没有关系，即使输入已经是有序的，也需要二次的时间复杂度</li>\n<li>选择排序的记录移动是所有算法中最小的，只有线性时间的交换</li>\n</ul>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><p>基本思想</p>\n<ol>\n<li>输入：包含N条记录的数列A</li>\n<li>从0 循环至 N-1</li>\n<li>在第i次循环中，把A[i]和位于它左边并且比它大的记录交换</li>\n</ol>\n<p>实现代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void insertion_sort(std::vector&lt;T&gt;&amp; a, int lo, int hi) &#123;</div><div class=\"line\">    for (int i = lo; i &lt;= hi; ++i) &#123;</div><div class=\"line\">        for (int j = i; j &gt; lo; --j) &#123;</div><div class=\"line\">            if (a[j] &lt; a[j - 1]) &#123;</div><div class=\"line\">                exch(a[j], a[j - 1]);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>基本特点</p>\n<ul>\n<li>如果输入记录是部分排序的话，插入排序的运行时间是线性的</li>\n</ul>\n<h2 id=\"shell-排序\"><a href=\"#shell-排序\" class=\"headerlink\" title=\"shell 排序\"></a>shell 排序</h2><p>shell 排序是插入排序的增强版：插入排序在往左比较大小时每次只后退一步，而shell排序每次会后退多步。假设后退h步，那么得到的序列就是一个以h为间隔排序好的序列。shell排序会进行多次h排序。h的取值则从大慢慢减为1，这样做的理由是：</p>\n<ul>\n<li>当h很大时，以h为间隔的序列较小，排序可以很快完成</li>\n<li>当h变为1时，由于之前已经进行了多次h间隔排序，序列已经部分排序，因此插入排序此时的运行时间是线性的，也可以很快完成。</li>\n</ul>\n<p>在实际中，通常h的取值序列有多种，不同的序列会导致不一样的时间复杂度。比较容易计算的是使用 3x + 1 这个公式来产生序列</p>\n<p>实现代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void shell_sort(std::vector&lt;T&gt;&amp; a, int lo, int hi) &#123;</div><div class=\"line\">    int N = hi - lo + 1;</div><div class=\"line\"></div><div class=\"line\">    // decide decrease sequence</div><div class=\"line\">    int h = 1;</div><div class=\"line\">    while (h &lt; N / 3) &#123;</div><div class=\"line\">        h = 3 * h + 1;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    while (h &gt;= 1) &#123;</div><div class=\"line\">        // h-sort the array</div><div class=\"line\">        for (int i = h + lo; i &lt;= hi; ++i) &#123;</div><div class=\"line\">            for (int j = i; j &gt;= h + lo &amp;&amp; a[j] &lt; a[j - h]; j -= h) &#123;</div><div class=\"line\">                exch(a[j], a[j - h]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        h = h / 3;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><p>堆排序体现了好的数据结构对算法的帮助。堆排序和选择排序的原理一致，都是从剩下的记录中不断选择最小的记录出来。但是选择排序需要线性的时间去查找最小记录。而从一个集合中选择最小的记录出来是一个经典的优先队列解决的问题，如果使用堆或者平衡二叉树来实现优先队列的话，就能让这个操作变成log(N)时间。从而，借助更好的优先队列实现，堆排序把选择排序从O(n^2)复杂度提升到了O(n\\log(n))</p>\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><p>堆是实现优先队列插入和获取最小值操作的简单而高效的数据结构。他通过维持记录部分排序而非完全排序来工作，因此会比较高效。一个堆实际上可以用一个二叉树来表示（注意不是二叉搜索树！）。在一个最小堆中，一个节点的键值总是比它的子节点要小；在一个最大堆中，一个节点的键值总是比它的子节点要大。</p>\n<p>堆使用数组来实现，不需要使用任何的指针！键值在堆中的位置充当了指针的作用。在这个数组中，我们把二叉树的根节点存储在数组的第一个位置（为了方便，数组索引从1开始），相应地把它的左右两个子节点放在第二和第三的位置。一般地，我们可以把完全二叉数第l层的2^l个键值从左到右放在2^{l-1}和2^l - 1之间。并且节点之间有以下关系：</p>\n<ul>\n<li>位于位置k的结点的父结点的位置是 k / 2</li>\n<li>位于位置k的结点的子节点的位置是 2k 和 2k + 1</li>\n</ul>\n<h2 id=\"如何构造一个堆\"><a href=\"#如何构造一个堆\" class=\"headerlink\" title=\"如何构造一个堆\"></a>如何构造一个堆</h2><p>可以通过往数组末端不断插入记录来递增地构造一个堆。在插入新记录时，堆的顺序可能会不满足预定的条件：在最小堆中新记录可能小于它的父节点，或者是在最大堆中新纪录大于它的父节点。在这种情况下，需要交换这个记录和它的父节点的位置，这称作一次上游,对这个记录不断上浮直到不能继续上游为止，就维持了堆的既有顺序。下面的代码显示了最小堆的上游代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">void swim(int k) &#123;</div><div class=\"line\">    // parent of node at k is k/2</div><div class=\"line\">    while (k &gt; 1 &amp;&amp; pq_[k / 2] &gt; pq_[k]) &#123;</div><div class=\"line\">        // if children&apos;s node is larger than parent, exchange</div><div class=\"line\">        exch(pq_[k], pq_[k / 2]);</div><div class=\"line\"></div><div class=\"line\">        // swim up a level</div><div class=\"line\">        k /= 2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于一个有n个记录的堆来说，一次上浮最多只需要lg(n)次操作，因此，构造堆的时间复杂度为O(n\\log(n))复杂度</p>\n<h2 id=\"如何从堆中取得最小值\"><a href=\"#如何从堆中取得最小值\" class=\"headerlink\" title=\"如何从堆中取得最小值\"></a>如何从堆中取得最小值</h2><p>从最小堆中取得最小的记录只需取数组的第一个元素即可，但是取完后二叉树会出现一个洞，需要把数组最后的一个记录填补到已经移除的第一个记录上；把最后一个记录移上来后可能会破坏堆的性质，如最小堆中根结点的记录可能会大于子结点，如果出现这种情况，需要将根结点和其较大的子结点交换，这称为一次下沉。下面是最小堆的下沉代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">void sink(int k) &#123;</div><div class=\"line\">    // make sure k is not the bottom level</div><div class=\"line\">    while (2 * k &lt;= N_) &#123;</div><div class=\"line\">        // j is the left children</div><div class=\"line\">        int j = 2 * k;</div><div class=\"line\">        if (j &lt; N_ &amp;&amp; pq_[j] &lt; pq_[j + 1]) &#123;</div><div class=\"line\">            // now, j is the bigger children</div><div class=\"line\">            j++;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (pq_[k] &gt; pq_[j]) &#123;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // if parent node is smaller than the bigger children, exchange</div><div class=\"line\">        exch(pq_[k], pq_[j]);</div><div class=\"line\"></div><div class=\"line\">        // sink down a level</div><div class=\"line\">        k = j;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于一个有n个记录的堆来说，一次下沉最多只需要lg(n)次操作，因此，取得最小值的操作的时间复杂度为O(\\log(n))</p>\n<h2 id=\"更快的构建堆的方法\"><a href=\"#更快的构建堆的方法\" class=\"headerlink\" title=\"更快的构建堆的方法\"></a>更快的构建堆的方法</h2><p>一条一条地插入记录来构造堆的方法需要O(n\\log(n))的时间复杂度，如果记录序列全部已知，我们可以采用一种自底向上的构造方法，基本思路是从底端不是叶子结点的记录开始，做下沉操作，这样只需处理n/2个结点，这个时间复杂度基本上是线性的。下面是最大堆的下沉操作和构造方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">  void sink(std::vector&lt;T&gt;&amp; a, int k, int N) &#123;</div><div class=\"line\">      // NOTE: the value of node k is a[k - 1]</div><div class=\"line\"></div><div class=\"line\">      // make sure k is not the bottom level</div><div class=\"line\">      while (2 * k &lt; N) &#123;</div><div class=\"line\">          // j is the left children</div><div class=\"line\">          int j = 2 * k;</div><div class=\"line\">          if (j &lt; N &amp;&amp; a[j - 1] &lt; a[j]) &#123;</div><div class=\"line\">              // now, j is the bigger children</div><div class=\"line\">              j++;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          if (a[k - 1] &gt; a[j - 1]) &#123;</div><div class=\"line\">              break;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          // if parent node is smaller than the bigger children, exchange</div><div class=\"line\">          exch(a[k - 1], a[j - 1]);</div><div class=\"line\"></div><div class=\"line\">          // sink down a level</div><div class=\"line\">          k = j;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  // Heap construction</div><div class=\"line\">  for (int k = N / 2; k &gt;= 1; --k) &#123;</div><div class=\"line\">      // loop for every non leaf node</div><div class=\"line\">      sink(pq, k, N);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>堆排序实现(这里用到了上面的最大堆的下沉方法)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void heap_sort(std::vector&lt;T&gt;&amp; pq) &#123;</div><div class=\"line\">    int N = pq.size();</div><div class=\"line\"></div><div class=\"line\">    // Heap construction</div><div class=\"line\">    for (int k = N / 2; k &gt;= 1; --k) &#123;</div><div class=\"line\">        // loop for every non leaf node</div><div class=\"line\">        sink(pq, k, N);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // Sort down</div><div class=\"line\">    while(N &gt; 1) &#123;</div><div class=\"line\">        exch(pq[0], pq[N - 1]);</div><div class=\"line\">        sink(pq, 1, --N);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>基本特点</p>\n<ul>\n<li>最坏的情况下也能达到O(n\\log(n))，这是排序算法的理论最优。</li>\n<li>缺点在于内部循环较长，无法使用缓存，并且是不稳定的，在实际中并不是最快的</li>\n</ul>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p>归并排序体现了分治的策略。主要思想是把大问题分解成小问题，不断递归去求解。</p>\n<p>代码实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">// merge tow subarray</div><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void merge(std::vector&lt;T&gt;&amp; a, std::vector&lt;T&gt;&amp; aux, int lo, int mid, int hi) &#123;</div><div class=\"line\">    for (int i = lo; i &lt;= hi; ++i) &#123;</div><div class=\"line\">        aux[i] = a[i];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int m = lo;</div><div class=\"line\">    int n = mid + 1;</div><div class=\"line\">    for (int i = lo; i &lt;= hi; ++i) &#123;</div><div class=\"line\">        if (m &gt; mid) &#123;</div><div class=\"line\">            a[i] = aux[n++];</div><div class=\"line\">        &#125; else if (n &gt; hi) &#123;</div><div class=\"line\">            a[i] = aux[m++];</div><div class=\"line\">        &#125; else if (aux[n] &lt; aux[m]) &#123;</div><div class=\"line\">            a[i] = aux[n++];</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            a[i] = aux[m++];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// resuive sort</div><div class=\"line\">const int CUTOFF = 7;</div><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void merge_sort(std::vector&lt;T&gt;&amp; a, std::vector&lt;T&gt;&amp; aux, int lo, int hi) &#123;</div><div class=\"line\">    if (hi &lt;= lo) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // use insertion sort for small subarrays</div><div class=\"line\">    if (hi &lt;= lo + CUTOFF - 1) &#123;</div><div class=\"line\">        insertion_sort(a, lo, hi);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int mid = lo + (hi - lo) / 2;</div><div class=\"line\">    merge_sort(a, aux, lo, mid);</div><div class=\"line\">    merge_sort(a, aux, mid + 1, hi);</div><div class=\"line\"></div><div class=\"line\">    // do not merge if already sorted</div><div class=\"line\">    if (a[mid] &lt; a[mid + 1]) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    merge(a, aux, lo, mid, hi);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述实现中借助了一个额外的aux数组来存储记录，并且在子问题规模很小时采用了插入排序。</p>\n<p>基本特点</p>\n<ul>\n<li>归并排序的平均时间复杂度为O(n\\log(n))</li>\n<li>归并排序不是原地排序，需要额外的存储空间</li>\n</ul>\n<h2 id=\"归并排序的非递归实现\"><a href=\"#归并排序的非递归实现\" class=\"headerlink\" title=\"归并排序的非递归实现\"></a>归并排序的非递归实现</h2><p>基本思想</p>\n<ol>\n<li>遍历数组，首先归并排序大小为1的子数组</li>\n<li>继续遍历，不断归并大小为2，4，16的子数组</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void bottom_up_merge_sort(std::vector&lt;T&gt;&amp; a, std::vector&lt;T&gt;&amp; aux, int lo, int hi) &#123;</div><div class=\"line\">    int N = hi - lo + 1;</div><div class=\"line\">    for (int sz = 1; sz &lt; N; sz += sz) &#123;</div><div class=\"line\">        for (int k = lo; k &lt; lo + N - sz; k += (sz + sz)) &#123;</div><div class=\"line\">            merge(a, aux, k, k + sz - 1, std::min(k + sz + sz - 1, N - 1));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>基本特点</p>\n<ul>\n<li>如果有足够的空间的话，非递归的归并排序的稳定性是工业级别的</li>\n</ul>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>快速排序和归并排序类似，都是递归的算法，通过把问题分解为子问题来解决。不同的是，归并排序每次都把问题分成相同大小的两个子问题，然后通过归并操作进行合并；而快速排序则通过拆分的方式来分解问题，即每次找一个中间元素，把记录分成小于该中间元素（在中间元素左边）和大于该中间元素（在中间元素右边）的这两部分，此时中间元素已经排好序，只需对左右两边递归继续采用相同方式拆分即可。</p>\n<p>和归并排序的归并操作是线性的时间复杂度类似，快速排序的拆分操作也是线性的。归并排序和快速排序的递归分解都把问题变成了一个二叉树的结构，而归并排序的二叉树是完全二叉树，因此树高是lg(n)，而快速排序的树高则与中间元素的选取有很大的关系，为了达到了归并排序相似的树高，要求输入记录必须是无序的，研究表明，无序的二叉树插入的树高平均只比完全二叉树高36%，因此该种情况下的快速排序和归并排序的时间复杂度是相同的。当然由于快速排序加入了随机的因素，我们只能说平均情况下快速排序和归并排序的时间复杂度是相同的，也不排除很小的概率的情况下快速排序的时间复杂度为n^2</p>\n<p>基本思想</p>\n<ul>\n<li>随机打乱原始记录</li>\n<li>针对索引为j的记录进行拆分，使得：<ul>\n<li>记录a[j]位于最终已排序的位置</li>\n<li>j左边的记录没有比a[j]大的</li>\n<li>j右边的记录没有比a[j]小的</li>\n</ul>\n</li>\n<li>对拆分后的各个部分递归进行上述处理</li>\n</ul>\n<p>代码实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">int partition(std::vector&lt;T&gt;&amp; a, int lo, int hi) &#123;</div><div class=\"line\">    int i = lo;</div><div class=\"line\">    int j = hi + 1;</div><div class=\"line\"></div><div class=\"line\">    while(true) &#123;</div><div class=\"line\">        // process i pointer</div><div class=\"line\">        // find item on left to swap</div><div class=\"line\">        while(a[++i] &lt; a[lo]) &#123;</div><div class=\"line\">            if (i == hi) &#123;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // process j pointer</div><div class=\"line\">        // find item on right to swap</div><div class=\"line\">        while(a[--j] &gt; a[lo]) &#123;</div><div class=\"line\">            if (j == lo) &#123;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // find if pointers cross</div><div class=\"line\">        if (i &gt;= j) &#123;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // swap</div><div class=\"line\">        exch(a[i], a[j]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // swap with partition item</div><div class=\"line\">    exch(a[lo], a[j]);</div><div class=\"line\"></div><div class=\"line\">    // return index of item now known to be in place</div><div class=\"line\">    return j;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void quick_sort_sub(std::vector&lt;T&gt;&amp; a, int lo, int hi) &#123;</div><div class=\"line\">    if (hi &lt;= lo + CUTOFF) &#123;</div><div class=\"line\">        // improvement 1:  use insertion fort for small subarray</div><div class=\"line\">        insertion_sort(a, lo, hi);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // improvement 2: estimate partition item with median of three samples</div><div class=\"line\">    int m = median_of_three(a, lo, lo + (hi - lo)/ 2, hi);</div><div class=\"line\">    exch(a[lo], a[m]);</div><div class=\"line\"></div><div class=\"line\">    int j = partition(a, lo, hi);</div><div class=\"line\">    quick_sort_sub(a, lo, j - 1);</div><div class=\"line\">    quick_sort_sub(a, j + 1, hi);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void quick_sort(std::vector&lt;T&gt;&amp; a) &#123;</div><div class=\"line\">    // shuffle is needed for performance guarantee</div><div class=\"line\">    shuffle(a);</div><div class=\"line\"></div><div class=\"line\">    quick_sort_sub&lt;T&gt;(a, 0, static_cast&lt;int&gt;(a.size()) - 1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的代码使用了两个提升：和归并排序中一样，我们在记录序列很小时采用了插入排序；另外我们本来是采用随机打乱后的记录顺序来选取中间值，为了让得到的二叉树更加平衡，我们需要选择接近数列中位数的记录作为中间值，这里我们采用了抽样的方式来计算中值。</p>\n<p>基本特点</p>\n<p>虽然快速排序理论上只能在概率上趋近于nlg(n)的时间复杂度，但是由于它的内层循环较小，并且容易利用计算机缓存等原因，一个设计得很好的快速排序的效率是归并排序和堆排序的2-3倍！</p>\n<p>在实际应用中，如果记录有许多重复的话，会发现快速排序接近于n^2的时间复杂度，这时候我们需要使用快速排序的改进版：3路快速排序</p>\n<h2 id=\"3路快速排序\"><a href=\"#3路快速排序\" class=\"headerlink\" title=\"3路快速排序\"></a>3路快速排序</h2><p>基本思想是：</p>\n<ul>\n<li>把记录序列查分成3部分（而不是之前的两部分）</li>\n<li>在lt和gt中间的记录都等于中间元素</li>\n<li>lt左边的记录都不大于中间元素</li>\n<li>lt右边的记录都不小于中间元素</li>\n</ul>\n<p>实现代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">// * Let v be partitioning item a[lo].</div><div class=\"line\">// * Scan i from left to right.</div><div class=\"line\">//  - (a[i] &lt; v): exchange a[lt] with a[i]; increment both lt and i</div><div class=\"line\">//  - (a[i] &gt; v): exchange a[gt] with a[i]; decrement gt;</div><div class=\"line\">//  - (a[i] == v): increment i</div><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void quick_sort_3way_sub(std::vector&lt;T&gt;&amp; a, int lo, int hi) &#123;</div><div class=\"line\">    if (hi &lt;= lo + CUTOFF) &#123;</div><div class=\"line\">        // improvement 1:  use insertion fort for small subarray</div><div class=\"line\">        insertion_sort(a, lo, hi);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int lt = lo;</div><div class=\"line\">    int i = lo;</div><div class=\"line\">    int gt = hi;</div><div class=\"line\"></div><div class=\"line\">    // improvement 2: estimate partition item with median of three samples</div><div class=\"line\">    int m = median_of_three(a, lo, lo + (hi - lo)/ 2, hi);</div><div class=\"line\">    exch(a[lo], a[m]);</div><div class=\"line\"></div><div class=\"line\">    // partition item</div><div class=\"line\">    T v = a[lo];</div><div class=\"line\"></div><div class=\"line\">    while(i &lt;= gt) &#123;</div><div class=\"line\">        if (a[i] &lt; v) &#123;</div><div class=\"line\">            exch(a[lt++], a[i++]);</div><div class=\"line\">        &#125; else if (a[i] &gt; v) &#123;</div><div class=\"line\">            exch(a[i], a[gt--]);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    quick_sort_3way_sub(a, lo, lt - 1);</div><div class=\"line\">    quick_sort_3way_sub(a, gt + 1, hi);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">void quick_sort_3way(std::vector&lt;T&gt;&amp; a) &#123;</div><div class=\"line\">    // shuffle is needed for performance guarantee</div><div class=\"line\">    shuffle(a);</div><div class=\"line\"></div><div class=\"line\">    quick_sort_3way_sub&lt;T&gt;(a, 0, static_cast&lt;int&gt;(a.size()) - 1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，经典的排序方法已经介绍完毕。除了选择排序和插入排序需要二次的时间复杂度外，堆排序、归并排序以及快速排序都能达到nlg(n)的时间复杂度，而这也是证明了的排序算法时间复杂度的下界，即这已经是最优算法了。但是从之前的讨论可以看到，在实际情况中，受到各种因素的限制，时间复杂度相同的算法的实际效率并不同，并且有可能相差数倍，当然，这是大O方式来衡量时间复杂度的一个弊端：即它只能忽略影响算法效率的其它因素，单单从输入规模上来看算法运行时间随输入规模的变化。从这个角度来看，虽然堆排序、归并排序以及快速排序都是最优算法，但是还可能有更快的排序算法等待着我们去发掘。</p>"},{"layout":"post","title":"实时更新OSM数据库","date":"2016-05-06T16:00:00.000Z","_content":"\n巧妇难为无米之炊。对于制图者，地图数据便是一切的基础。[OpenStreetMap](http://www.openstreetmap.org/)（简称OSM）是一个全球路网数据（不仅仅是路网数据，还包括行政区划、自然要素等数据）的众包平台，地球上的每个人都可以免费得到这份全球的数据。由于众包的性质，OSM的数据每分钟都在发生变化，因此，维护一个实时（分钟级的频率）更新的OSM数据源使我们的地图能够有更好的时效性。\n\n<!-- more -->\n\n## 依赖的工具\n\n* [osm2pgsql](https://github.com/openstreetmap/osm2pgsql)\n\nosm2pgsql 可以将OSM的数据导入PostgreSQL中，转化成易于渲染的结构，并且支持增量更新。\n\n* [osmosis](https://github.com/openstreetmap/osmosis)\n\nosmosis 是一个java的命令行工具，主要用来进行OSM数据的各种格式之间的转换，这里用来从OSM远程服务器中获取更改集，从而osm2pgsql可以将此更改集增量应用到数据库中。\n\n* PostgreSQL, 带postgis拓展\n\n在进行下面的操作之前，请先安装好这三个软件。\n\n## 一、 初始化数据库\n\n1. 下载[全球](http://planet.openstreetmap.org/)或者[某个区域](http://download.geofabrik.de/index.html)的osm数据，最好选择pbf格式，相比于xml格式，pbf格式会小很多。下载的时候记下数据的生产时间，下面选择同步起始时间的时候会用到，这个时间在下载的页面里会有说明。\n\n2. 使用下述sql创建一个数据库，并且建立拓展。\n\n```\ncreatedb osm\npsql -d osm -c 'CREATE EXTENSION postgis; CREATE EXTENSION hstore;'\n```\n这里osm是我的数据库名，如果不习惯用命令行，可以用pgAdmin来进行上述操作。总之，现在我们有了一个全新的带有空间拓展的数据库了。\n\n3. 使用下面的命令导入之前下载好的数据\n\n```\nosm2pgsql -c -d osm --slim -C <75% Mem> --flat-nodes <flat nodes> -U gis -W -H localhost -P 5432 you.osm.pbf\n```\n\n这里有几个地方要注意，一个是-C选项最好指定你电脑的内存的75%，单位为Mb，并且最大只能为30000，--flat-nodes 用来指定一个文件路径，存放这个文件的位置至少要有20G的空闲空间（如果导入全球数据的话）。\n执行这个命令可能会耗费一段时间，特别是导入全球数据，可能需要几天，如果导入全国的数据，我用8G内存的Macbook Pro只需要不到一个小时。注意虽然我们下载的数据量可能不是很大，但是导入到数据库后会占据很可观的数据磁盘空间，我的笔记本里全国的数据占据了接近10G的空间，因此导入比较大的范围的数据需要保证有足够的磁盘空间可用。\n\n## 二、初始化更新频率\n\n1. 首先指定更新的工作目录。下面的这行可以放到主目录下的 .bash_profile里，如果是windows用户可以新建一个系统的环境变量。\n\n```\nexport WORKDIR_OSM=$HOME/.osmosis\n```\n\n2. 初始化工作目录\n\n```\nmkdir $WORKDIR_OSM\nosmosis --read-replication-interval-init workingDirectory=$WORKDIR_OSM\n```\n上面的命令告诉osmosis从哪个目录寻找更新的信息，以及下载数据到哪里。osmosis会在这个目录里创建configuration.txt和download.lock这两个文件。download.lock文件用来确保同一时刻只会进行一个更新任务。configuration.txt文件则用来指定更新的频率。默认情况下，osmosis会提取每分钟的更改集，如果想改为提取每小时或者是天的，可以把configuration.txt里的baseurl中的replication/minute/部分改为replication/hour/或者replication/day/。默认情况下每次执行更新任务最多只会提取1分钟的更改集，可以把maxInterval=3600设为0，这样子就可以一次提取所有的更改集。\n\n为了让osmosis知道从哪个时刻开始进行更新，我们还要告诉它我们刚刚导入的数据的时间，访问[Peter Körner's website tool](https://osm.mazdermind.de/replicate-sequences/)，输入我们的数据的时间，可以得到一个UTC格式的时间文件，把它保存到工作目录中，并命名为state.txt。\n\n3. 执行更新任务\n\n```\nosmosis -q --rri --bc --simc --bc --write-xml-change \"-\" | osm2pgsql -s -a -b \"73,3,136,54\" -U gis -d osm -P 5432 -H localhost -e 15 -o expire.list -\n```\n\n上述的命令中，如果导入的是全球的数据就不需要有-b参数。expire.list中包含的是底第15级的dirty tile（即数据有更新的瓦片），这些瓦片需要重新生成。\n\nlinux上可以使用crontab命令定期执行上述命令，这样就可以得到一个以分钟级的频率与OSM数据保持同步的本地数据库了。\n\n如果使用-b选项指定了更新的范围，可能会使数据库变大，此时可以使用下面的sql删除掉无关的way和relation。\n\n```\nDELETE FROM planet_osm_ways AS w WHERE 0 = (SELECT count(1) FROM planet_osm_nodes AS n WHERE n.id = ANY(w.nodes));\n\nDELETE FROM planet_osm_rels AS r WHERE\n  0=(SELECT count(1) FROM planet_osm_nodes AS n WHERE n.id = ANY(r.parts))\nAND\n  0=(SELECT count(1) FROM planet_osm_ways AS w WHERE w.id = ANY(r.parts));\nREINDEX TABLE planet_osm_ways;\nREINDEX TABLE planet_osm_rels;\nVACUUM FULL;\n```\n\n\n","source":"_posts/2016-05-07-minutely-osm-database.md","raw":"---\nlayout: post\ntitle: \"实时更新OSM数据库\"\ndate: 2016-05-07\ntags:\n  - OSM\n---\n\n巧妇难为无米之炊。对于制图者，地图数据便是一切的基础。[OpenStreetMap](http://www.openstreetmap.org/)（简称OSM）是一个全球路网数据（不仅仅是路网数据，还包括行政区划、自然要素等数据）的众包平台，地球上的每个人都可以免费得到这份全球的数据。由于众包的性质，OSM的数据每分钟都在发生变化，因此，维护一个实时（分钟级的频率）更新的OSM数据源使我们的地图能够有更好的时效性。\n\n<!-- more -->\n\n## 依赖的工具\n\n* [osm2pgsql](https://github.com/openstreetmap/osm2pgsql)\n\nosm2pgsql 可以将OSM的数据导入PostgreSQL中，转化成易于渲染的结构，并且支持增量更新。\n\n* [osmosis](https://github.com/openstreetmap/osmosis)\n\nosmosis 是一个java的命令行工具，主要用来进行OSM数据的各种格式之间的转换，这里用来从OSM远程服务器中获取更改集，从而osm2pgsql可以将此更改集增量应用到数据库中。\n\n* PostgreSQL, 带postgis拓展\n\n在进行下面的操作之前，请先安装好这三个软件。\n\n## 一、 初始化数据库\n\n1. 下载[全球](http://planet.openstreetmap.org/)或者[某个区域](http://download.geofabrik.de/index.html)的osm数据，最好选择pbf格式，相比于xml格式，pbf格式会小很多。下载的时候记下数据的生产时间，下面选择同步起始时间的时候会用到，这个时间在下载的页面里会有说明。\n\n2. 使用下述sql创建一个数据库，并且建立拓展。\n\n```\ncreatedb osm\npsql -d osm -c 'CREATE EXTENSION postgis; CREATE EXTENSION hstore;'\n```\n这里osm是我的数据库名，如果不习惯用命令行，可以用pgAdmin来进行上述操作。总之，现在我们有了一个全新的带有空间拓展的数据库了。\n\n3. 使用下面的命令导入之前下载好的数据\n\n```\nosm2pgsql -c -d osm --slim -C <75% Mem> --flat-nodes <flat nodes> -U gis -W -H localhost -P 5432 you.osm.pbf\n```\n\n这里有几个地方要注意，一个是-C选项最好指定你电脑的内存的75%，单位为Mb，并且最大只能为30000，--flat-nodes 用来指定一个文件路径，存放这个文件的位置至少要有20G的空闲空间（如果导入全球数据的话）。\n执行这个命令可能会耗费一段时间，特别是导入全球数据，可能需要几天，如果导入全国的数据，我用8G内存的Macbook Pro只需要不到一个小时。注意虽然我们下载的数据量可能不是很大，但是导入到数据库后会占据很可观的数据磁盘空间，我的笔记本里全国的数据占据了接近10G的空间，因此导入比较大的范围的数据需要保证有足够的磁盘空间可用。\n\n## 二、初始化更新频率\n\n1. 首先指定更新的工作目录。下面的这行可以放到主目录下的 .bash_profile里，如果是windows用户可以新建一个系统的环境变量。\n\n```\nexport WORKDIR_OSM=$HOME/.osmosis\n```\n\n2. 初始化工作目录\n\n```\nmkdir $WORKDIR_OSM\nosmosis --read-replication-interval-init workingDirectory=$WORKDIR_OSM\n```\n上面的命令告诉osmosis从哪个目录寻找更新的信息，以及下载数据到哪里。osmosis会在这个目录里创建configuration.txt和download.lock这两个文件。download.lock文件用来确保同一时刻只会进行一个更新任务。configuration.txt文件则用来指定更新的频率。默认情况下，osmosis会提取每分钟的更改集，如果想改为提取每小时或者是天的，可以把configuration.txt里的baseurl中的replication/minute/部分改为replication/hour/或者replication/day/。默认情况下每次执行更新任务最多只会提取1分钟的更改集，可以把maxInterval=3600设为0，这样子就可以一次提取所有的更改集。\n\n为了让osmosis知道从哪个时刻开始进行更新，我们还要告诉它我们刚刚导入的数据的时间，访问[Peter Körner's website tool](https://osm.mazdermind.de/replicate-sequences/)，输入我们的数据的时间，可以得到一个UTC格式的时间文件，把它保存到工作目录中，并命名为state.txt。\n\n3. 执行更新任务\n\n```\nosmosis -q --rri --bc --simc --bc --write-xml-change \"-\" | osm2pgsql -s -a -b \"73,3,136,54\" -U gis -d osm -P 5432 -H localhost -e 15 -o expire.list -\n```\n\n上述的命令中，如果导入的是全球的数据就不需要有-b参数。expire.list中包含的是底第15级的dirty tile（即数据有更新的瓦片），这些瓦片需要重新生成。\n\nlinux上可以使用crontab命令定期执行上述命令，这样就可以得到一个以分钟级的频率与OSM数据保持同步的本地数据库了。\n\n如果使用-b选项指定了更新的范围，可能会使数据库变大，此时可以使用下面的sql删除掉无关的way和relation。\n\n```\nDELETE FROM planet_osm_ways AS w WHERE 0 = (SELECT count(1) FROM planet_osm_nodes AS n WHERE n.id = ANY(w.nodes));\n\nDELETE FROM planet_osm_rels AS r WHERE\n  0=(SELECT count(1) FROM planet_osm_nodes AS n WHERE n.id = ANY(r.parts))\nAND\n  0=(SELECT count(1) FROM planet_osm_ways AS w WHERE w.id = ANY(r.parts));\nREINDEX TABLE planet_osm_ways;\nREINDEX TABLE planet_osm_rels;\nVACUUM FULL;\n```\n\n\n","slug":"minutely-osm-database","published":1,"updated":"2016-08-25T14:30:59.000Z","_id":"cisadnf8u0002hdjc24la16xh","comments":1,"photos":[],"link":"","content":"<p>巧妇难为无米之炊。对于制图者，地图数据便是一切的基础。<a href=\"http://www.openstreetmap.org/\" target=\"_blank\" rel=\"external\">OpenStreetMap</a>（简称OSM）是一个全球路网数据（不仅仅是路网数据，还包括行政区划、自然要素等数据）的众包平台，地球上的每个人都可以免费得到这份全球的数据。由于众包的性质，OSM的数据每分钟都在发生变化，因此，维护一个实时（分钟级的频率）更新的OSM数据源使我们的地图能够有更好的时效性。</p>\n<a id=\"more\"></a>\n<h2 id=\"依赖的工具\"><a href=\"#依赖的工具\" class=\"headerlink\" title=\"依赖的工具\"></a>依赖的工具</h2><ul>\n<li><a href=\"https://github.com/openstreetmap/osm2pgsql\" target=\"_blank\" rel=\"external\">osm2pgsql</a></li>\n</ul>\n<p>osm2pgsql 可以将OSM的数据导入PostgreSQL中，转化成易于渲染的结构，并且支持增量更新。</p>\n<ul>\n<li><a href=\"https://github.com/openstreetmap/osmosis\" target=\"_blank\" rel=\"external\">osmosis</a></li>\n</ul>\n<p>osmosis 是一个java的命令行工具，主要用来进行OSM数据的各种格式之间的转换，这里用来从OSM远程服务器中获取更改集，从而osm2pgsql可以将此更改集增量应用到数据库中。</p>\n<ul>\n<li>PostgreSQL, 带postgis拓展</li>\n</ul>\n<p>在进行下面的操作之前，请先安装好这三个软件。</p>\n<h2 id=\"一、-初始化数据库\"><a href=\"#一、-初始化数据库\" class=\"headerlink\" title=\"一、 初始化数据库\"></a>一、 初始化数据库</h2><ol>\n<li><p>下载<a href=\"http://planet.openstreetmap.org/\" target=\"_blank\" rel=\"external\">全球</a>或者<a href=\"http://download.geofabrik.de/index.html\" target=\"_blank\" rel=\"external\">某个区域</a>的osm数据，最好选择pbf格式，相比于xml格式，pbf格式会小很多。下载的时候记下数据的生产时间，下面选择同步起始时间的时候会用到，这个时间在下载的页面里会有说明。</p>\n</li>\n<li><p>使用下述sql创建一个数据库，并且建立拓展。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">createdb osm</div><div class=\"line\">psql -d osm -c &apos;CREATE EXTENSION postgis; CREATE EXTENSION hstore;&apos;</div></pre></td></tr></table></figure>\n<p>这里osm是我的数据库名，如果不习惯用命令行，可以用pgAdmin来进行上述操作。总之，现在我们有了一个全新的带有空间拓展的数据库了。</p>\n<ol>\n<li>使用下面的命令导入之前下载好的数据</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">osm2pgsql -c -d osm --slim -C &lt;75% Mem&gt; --flat-nodes &lt;flat nodes&gt; -U gis -W -H localhost -P 5432 you.osm.pbf</div></pre></td></tr></table></figure>\n<p>这里有几个地方要注意，一个是-C选项最好指定你电脑的内存的75%，单位为Mb，并且最大只能为30000，–flat-nodes 用来指定一个文件路径，存放这个文件的位置至少要有20G的空闲空间（如果导入全球数据的话）。<br>执行这个命令可能会耗费一段时间，特别是导入全球数据，可能需要几天，如果导入全国的数据，我用8G内存的Macbook Pro只需要不到一个小时。注意虽然我们下载的数据量可能不是很大，但是导入到数据库后会占据很可观的数据磁盘空间，我的笔记本里全国的数据占据了接近10G的空间，因此导入比较大的范围的数据需要保证有足够的磁盘空间可用。</p>\n<h2 id=\"二、初始化更新频率\"><a href=\"#二、初始化更新频率\" class=\"headerlink\" title=\"二、初始化更新频率\"></a>二、初始化更新频率</h2><ol>\n<li>首先指定更新的工作目录。下面的这行可以放到主目录下的 .bash_profile里，如果是windows用户可以新建一个系统的环境变量。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export WORKDIR_OSM=$HOME/.osmosis</div></pre></td></tr></table></figure>\n<ol>\n<li>初始化工作目录</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir $WORKDIR_OSM</div><div class=\"line\">osmosis --read-replication-interval-init workingDirectory=$WORKDIR_OSM</div></pre></td></tr></table></figure>\n<p>上面的命令告诉osmosis从哪个目录寻找更新的信息，以及下载数据到哪里。osmosis会在这个目录里创建configuration.txt和download.lock这两个文件。download.lock文件用来确保同一时刻只会进行一个更新任务。configuration.txt文件则用来指定更新的频率。默认情况下，osmosis会提取每分钟的更改集，如果想改为提取每小时或者是天的，可以把configuration.txt里的baseurl中的replication/minute/部分改为replication/hour/或者replication/day/。默认情况下每次执行更新任务最多只会提取1分钟的更改集，可以把maxInterval=3600设为0，这样子就可以一次提取所有的更改集。</p>\n<p>为了让osmosis知道从哪个时刻开始进行更新，我们还要告诉它我们刚刚导入的数据的时间，访问<a href=\"https://osm.mazdermind.de/replicate-sequences/\" target=\"_blank\" rel=\"external\">Peter Körner’s website tool</a>，输入我们的数据的时间，可以得到一个UTC格式的时间文件，把它保存到工作目录中，并命名为state.txt。</p>\n<ol>\n<li>执行更新任务</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">osmosis -q --rri --bc --simc --bc --write-xml-change &quot;-&quot; | osm2pgsql -s -a -b &quot;73,3,136,54&quot; -U gis -d osm -P 5432 -H localhost -e 15 -o expire.list -</div></pre></td></tr></table></figure>\n<p>上述的命令中，如果导入的是全球的数据就不需要有-b参数。expire.list中包含的是底第15级的dirty tile（即数据有更新的瓦片），这些瓦片需要重新生成。</p>\n<p>linux上可以使用crontab命令定期执行上述命令，这样就可以得到一个以分钟级的频率与OSM数据保持同步的本地数据库了。</p>\n<p>如果使用-b选项指定了更新的范围，可能会使数据库变大，此时可以使用下面的sql删除掉无关的way和relation。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELETE FROM planet_osm_ways AS w WHERE 0 = (SELECT count(1) FROM planet_osm_nodes AS n WHERE n.id = ANY(w.nodes));</div><div class=\"line\"></div><div class=\"line\">DELETE FROM planet_osm_rels AS r WHERE</div><div class=\"line\">  0=(SELECT count(1) FROM planet_osm_nodes AS n WHERE n.id = ANY(r.parts))</div><div class=\"line\">AND</div><div class=\"line\">  0=(SELECT count(1) FROM planet_osm_ways AS w WHERE w.id = ANY(r.parts));</div><div class=\"line\">REINDEX TABLE planet_osm_ways;</div><div class=\"line\">REINDEX TABLE planet_osm_rels;</div><div class=\"line\">VACUUM FULL;</div></pre></td></tr></table></figure>\n","excerpt":"<p>巧妇难为无米之炊。对于制图者，地图数据便是一切的基础。<a href=\"http://www.openstreetmap.org/\">OpenStreetMap</a>（简称OSM）是一个全球路网数据（不仅仅是路网数据，还包括行政区划、自然要素等数据）的众包平台，地球上的每个人都可以免费得到这份全球的数据。由于众包的性质，OSM的数据每分钟都在发生变化，因此，维护一个实时（分钟级的频率）更新的OSM数据源使我们的地图能够有更好的时效性。</p>","more":"<h2 id=\"依赖的工具\"><a href=\"#依赖的工具\" class=\"headerlink\" title=\"依赖的工具\"></a>依赖的工具</h2><ul>\n<li><a href=\"https://github.com/openstreetmap/osm2pgsql\">osm2pgsql</a></li>\n</ul>\n<p>osm2pgsql 可以将OSM的数据导入PostgreSQL中，转化成易于渲染的结构，并且支持增量更新。</p>\n<ul>\n<li><a href=\"https://github.com/openstreetmap/osmosis\">osmosis</a></li>\n</ul>\n<p>osmosis 是一个java的命令行工具，主要用来进行OSM数据的各种格式之间的转换，这里用来从OSM远程服务器中获取更改集，从而osm2pgsql可以将此更改集增量应用到数据库中。</p>\n<ul>\n<li>PostgreSQL, 带postgis拓展</li>\n</ul>\n<p>在进行下面的操作之前，请先安装好这三个软件。</p>\n<h2 id=\"一、-初始化数据库\"><a href=\"#一、-初始化数据库\" class=\"headerlink\" title=\"一、 初始化数据库\"></a>一、 初始化数据库</h2><ol>\n<li><p>下载<a href=\"http://planet.openstreetmap.org/\">全球</a>或者<a href=\"http://download.geofabrik.de/index.html\">某个区域</a>的osm数据，最好选择pbf格式，相比于xml格式，pbf格式会小很多。下载的时候记下数据的生产时间，下面选择同步起始时间的时候会用到，这个时间在下载的页面里会有说明。</p>\n</li>\n<li><p>使用下述sql创建一个数据库，并且建立拓展。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">createdb osm</div><div class=\"line\">psql -d osm -c &apos;CREATE EXTENSION postgis; CREATE EXTENSION hstore;&apos;</div></pre></td></tr></table></figure>\n<p>这里osm是我的数据库名，如果不习惯用命令行，可以用pgAdmin来进行上述操作。总之，现在我们有了一个全新的带有空间拓展的数据库了。</p>\n<ol>\n<li>使用下面的命令导入之前下载好的数据</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">osm2pgsql -c -d osm --slim -C &lt;75% Mem&gt; --flat-nodes &lt;flat nodes&gt; -U gis -W -H localhost -P 5432 you.osm.pbf</div></pre></td></tr></table></figure>\n<p>这里有几个地方要注意，一个是-C选项最好指定你电脑的内存的75%，单位为Mb，并且最大只能为30000，–flat-nodes 用来指定一个文件路径，存放这个文件的位置至少要有20G的空闲空间（如果导入全球数据的话）。<br>执行这个命令可能会耗费一段时间，特别是导入全球数据，可能需要几天，如果导入全国的数据，我用8G内存的Macbook Pro只需要不到一个小时。注意虽然我们下载的数据量可能不是很大，但是导入到数据库后会占据很可观的数据磁盘空间，我的笔记本里全国的数据占据了接近10G的空间，因此导入比较大的范围的数据需要保证有足够的磁盘空间可用。</p>\n<h2 id=\"二、初始化更新频率\"><a href=\"#二、初始化更新频率\" class=\"headerlink\" title=\"二、初始化更新频率\"></a>二、初始化更新频率</h2><ol>\n<li>首先指定更新的工作目录。下面的这行可以放到主目录下的 .bash_profile里，如果是windows用户可以新建一个系统的环境变量。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export WORKDIR_OSM=$HOME/.osmosis</div></pre></td></tr></table></figure>\n<ol>\n<li>初始化工作目录</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir $WORKDIR_OSM</div><div class=\"line\">osmosis --read-replication-interval-init workingDirectory=$WORKDIR_OSM</div></pre></td></tr></table></figure>\n<p>上面的命令告诉osmosis从哪个目录寻找更新的信息，以及下载数据到哪里。osmosis会在这个目录里创建configuration.txt和download.lock这两个文件。download.lock文件用来确保同一时刻只会进行一个更新任务。configuration.txt文件则用来指定更新的频率。默认情况下，osmosis会提取每分钟的更改集，如果想改为提取每小时或者是天的，可以把configuration.txt里的baseurl中的replication/minute/部分改为replication/hour/或者replication/day/。默认情况下每次执行更新任务最多只会提取1分钟的更改集，可以把maxInterval=3600设为0，这样子就可以一次提取所有的更改集。</p>\n<p>为了让osmosis知道从哪个时刻开始进行更新，我们还要告诉它我们刚刚导入的数据的时间，访问<a href=\"https://osm.mazdermind.de/replicate-sequences/\">Peter Körner’s website tool</a>，输入我们的数据的时间，可以得到一个UTC格式的时间文件，把它保存到工作目录中，并命名为state.txt。</p>\n<ol>\n<li>执行更新任务</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">osmosis -q --rri --bc --simc --bc --write-xml-change &quot;-&quot; | osm2pgsql -s -a -b &quot;73,3,136,54&quot; -U gis -d osm -P 5432 -H localhost -e 15 -o expire.list -</div></pre></td></tr></table></figure>\n<p>上述的命令中，如果导入的是全球的数据就不需要有-b参数。expire.list中包含的是底第15级的dirty tile（即数据有更新的瓦片），这些瓦片需要重新生成。</p>\n<p>linux上可以使用crontab命令定期执行上述命令，这样就可以得到一个以分钟级的频率与OSM数据保持同步的本地数据库了。</p>\n<p>如果使用-b选项指定了更新的范围，可能会使数据库变大，此时可以使用下面的sql删除掉无关的way和relation。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELETE FROM planet_osm_ways AS w WHERE 0 = (SELECT count(1) FROM planet_osm_nodes AS n WHERE n.id = ANY(w.nodes));</div><div class=\"line\"></div><div class=\"line\">DELETE FROM planet_osm_rels AS r WHERE</div><div class=\"line\">  0=(SELECT count(1) FROM planet_osm_nodes AS n WHERE n.id = ANY(r.parts))</div><div class=\"line\">AND</div><div class=\"line\">  0=(SELECT count(1) FROM planet_osm_ways AS w WHERE w.id = ANY(r.parts));</div><div class=\"line\">REINDEX TABLE planet_osm_ways;</div><div class=\"line\">REINDEX TABLE planet_osm_rels;</div><div class=\"line\">VACUUM FULL;</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cisadnf8o0000hdjco620dngh","tag_id":"cisadnf8w0004hdjcvbrf07ia","_id":"cisadnf910006hdjcfbjlo135"},{"post_id":"cisadnf8u0002hdjc24la16xh","tag_id":"cisadnf8z0005hdjcx0a0yw5v","_id":"cisadnf910007hdjc9nfnubq3"}],"Tag":[{"name":"算法","_id":"cisadnf8w0004hdjcvbrf07ia"},{"name":"OSM","_id":"cisadnf8z0005hdjcx0a0yw5v"}]}}